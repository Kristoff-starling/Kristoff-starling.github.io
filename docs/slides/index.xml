<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slides | Academic</title>
    <link>https://kristoff-starling.github.io/slides/</link>
      <atom:link href="https://kristoff-starling.github.io/slides/index.xml" rel="self" type="application/rss+xml" />
    <description>Slides</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 03 Nov 2022 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Slides</title>
      <link>https://kristoff-starling.github.io/slides/20221104/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/slides/20221104/</guid>
      <description>&lt;h2 id=&#34;tfpytorch-with-sanitizers&#34;&gt;TF/Pytorch with Sanitizers&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;PyTorch&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1085 APIs are tested.&lt;/li&gt;
&lt;li&gt;ASan+UBSan / Compute Sanitizer&lt;/li&gt;
&lt;li&gt;Two kinds of false positives are filtered:
&lt;ul&gt;
&lt;li&gt;Invalid argument error&lt;/li&gt;
&lt;li&gt;Out-of-memory allocations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;#APIs&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;#Bugs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ASan&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;UBSan&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;19&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CSan&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;ASan:
&lt;ul&gt;
&lt;li&gt;heap-buffer-overflow&lt;/li&gt;
&lt;li&gt;heap use-after-free&lt;/li&gt;
&lt;li&gt;SEGV on unknown address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UBSan:
&lt;ul&gt;
&lt;li&gt;signed integer overflow&lt;/li&gt;
&lt;li&gt;non-zero offset to null pointer&lt;/li&gt;
&lt;li&gt;negative shift exponent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSan:
&lt;ul&gt;
&lt;li&gt;Warp assertion&lt;/li&gt;
&lt;li&gt;CudaInvalidConfiguration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;tensorflow&#34;&gt;TensorFlow&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;results-1&#34;&gt;Results&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;#APIs&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;#Bugs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CSan&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Out-of-bound reads&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://kristoff-starling.github.io/slides/20221007/</link>
      <pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/slides/20221007/</guid>
      <description>&lt;h2 id=&#34;tf-with-sanitizers&#34;&gt;TF with Sanitizers&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;addressmemoryub-sanitizer&#34;&gt;Address/Memory/UB Sanitizer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;asan/msan: build fail (GCC/Clang)&lt;/li&gt;
&lt;li&gt;ubsan: stuck during linking&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=left&gt;GitHub issue (#50892): &#34;Currently we don&#39;t officially support an OSS ASAN build, although one is in the long term roadmap.&#34;&lt;/p&gt;
&lt;p align=right&gt;Aug 2, 2021&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;compute-sanitizer&#34;&gt;Compute Sanitizer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t need additional flags for compilation, even a binary version works (?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Command: &lt;code&gt;compute-sanitizer --tool memcheck python3 test.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import tensorflow as tf
_ = tf.config.list_physical_device(&#39;GPU&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;=&amp;gt; terminate w/o error&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import tensorflow as tf
_ = tf.abs(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;=&amp;gt; deadlock&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://kristoff-starling.github.io/slides/20220727/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/slides/20220727/</guid>
      <description>&lt;h2 id=&#34;dl-library-fuzzing&#34;&gt;DL Library Fuzzing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bug-report&#34;&gt;Bug Report&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Source: release notes of latest versions, Github PRs&lt;/li&gt;
&lt;li&gt;Version: TensorFlow 2.8&amp;amp;2.9, PyTorch 1.12&lt;/li&gt;
&lt;li&gt;Amount: 40&lt;/li&gt;
&lt;li&gt;Multi-API triggered bugs: 8 (all in PyTorch)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;typical-bugs&#34;&gt;Typical Bugs&lt;/h3&gt;
&lt;p&gt;PyTorch, GitHub #73187&lt;/p&gt;
&lt;p align=left&gt;Error: unexpected RuntimeError&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch

grad_output = torch.full((1, 1, 1, 4, 4,), 1, dtype=torch.float64, requires_grad=True)
input = torch.full((5, 5, 5, 5, 5,), 3.5e+35, dtype=torch.float64, requires_grad=True)
grid = torch.full((1, 1, 1, 4, 4,), 1, dtype=torch.float64, requires_grad=True)
interpolation_mode = 0
padding_mode = 0
align_corners = True
res = torch.grid_sampler_3d(input, grid, interpolation_mode, padding_mode, align_corners)
grad_out = torch.zeros_like(res)
torch.autograd.backward(res, grad_tensors=grad_out)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;grid_sampler_3d()&lt;/code&gt; + &lt;code&gt;backward()&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;typical-bugs-1&#34;&gt;Typical Bugs&lt;/h3&gt;
&lt;p&gt;PyTorch, GitHub #75781&lt;/p&gt;
&lt;p align=left&gt;Error: unexpected warning&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch

if __name__ == &amp;quot;__main__&amp;quot;:

    n = 8
    x = torch.zeros(n).normal_()
    x.requires_grad = True
    z = torch.fft.irfft(x).sum()
    z.backward()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fft()&lt;/code&gt; + &lt;code&gt;irfft()&lt;/code&gt; + &lt;code&gt;sum()&lt;/code&gt; + &lt;code&gt;backward()&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;typical-bugs-2&#34;&gt;Typical Bugs&lt;/h3&gt;
&lt;p&gt;PyTorch, GitHub #77245&lt;/p&gt;
&lt;p align=left&gt;Error: unexpected RuntimeError&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch

def fn(input):
    offset = 0
    fn_res = torch.diagonal(input, offset=offset, )
    return fn_res

input = torch.rand([0, 1], dtype=torch.complex128, requires_grad=True)
torch.autograd.gradcheck(fn, (input), check_forward_ad=True, check_backward_ad=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;gradcheck()&lt;/code&gt; + &lt;code&gt;diagonal()&lt;/code&gt; + function parameter&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;typical-bugs-3&#34;&gt;Typical Bugs&lt;/h3&gt;
&lt;p&gt;PyTorch, GitHub #77526&lt;/p&gt;
&lt;p align=left&gt;Error: man-made assertion error&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = torch.randn((2, 2), dtype=torch.cfloat).transpose(0, 1)
result = torch.abs(a)
assert a.stride() == b.stride()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;transpose()&lt;/code&gt; + &lt;code&gt;abs()&lt;/code&gt; + &lt;code&gt;stride()&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux kernel(system) v.s. DL libraries(tool kit)&lt;/li&gt;
&lt;li&gt;Common bug types
&lt;ul&gt;
&lt;li&gt;Integer overflow, division by zero&lt;/li&gt;
&lt;li&gt;Out of memory(OOM), Out of bound(OOB)&lt;/li&gt;
&lt;li&gt;missing validation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;documentation&#34;&gt;Documentation&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;documentation-semantics&#34;&gt;Documentation Semantics&lt;/h3&gt;
&lt;p&gt;Learning-based semantics &amp;lsquo;understanding&amp;rsquo; seems inevitable. $\Rightarrow$ NLP work&lt;/p&gt;
&lt;p align=left&gt;An interesting bug: PyTorch, GitHub #70657&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch
assert torch.ones(10)[::2].ravel().is_contiguous() == True
&lt;/code&gt;&lt;/pre&gt;
&lt;p align=left&gt;The assertion comes from the document: &#34;ravel() returns a &lt;b&gt;contiguous&lt;/b&gt; flattened tensor&#34;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;documentation-structure&#34;&gt;Documentation Structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &amp;ldquo;Python API&amp;rdquo; module is divided into 54 sections, including &lt;code&gt;torch&lt;/code&gt;, &lt;code&gt;torch.nn&lt;/code&gt;, &lt;code&gt;torch.cuda&lt;/code&gt; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;torch.nn&lt;/code&gt; section is divided into 20 subsections, including &amp;ldquo;Convolutional layers&amp;rdquo;, &amp;ldquo;Pooling layers&amp;rdquo;, &amp;ldquo;Padding layers&amp;rdquo; etc. The section contains 186 APIs in total.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subsection &amp;ldquo;Convolutional layers&amp;rdquo; includes 14 APIs, offering rich relational information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;documentation-structure-1&#34;&gt;Documentation Structure&lt;/h3&gt;
&lt;p align=left&gt;Drawback: scalability (e.g. TensorFlow&#39;s doc only has coarse categories and lots of APIs are sorted in chronological order.)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fuzzing&#34;&gt;Fuzzing&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;fuzzing-perspectives&#34;&gt;Fuzzing perspectives&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Model-level fuzzing: CRADLE, LEMON&lt;/li&gt;
&lt;li&gt;Sub-Model?&lt;/li&gt;
&lt;li&gt;API-level fuzzing: FreeFuzz, DeepREL, DocTer&lt;/li&gt;
&lt;li&gt;Sub-API?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sub-model-fuzzing&#34;&gt;Sub-Model Fuzzing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Model-level: precison loss, hard for mutation&amp;hellip;&lt;/li&gt;
&lt;li&gt;API-level: complicated situations uncovered&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=left&gt;
Sub-model level fuzzing serves as an auxiliary approach to cover more cases. The scale of sub-models/combinations of APIs should be small.
&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;example-pytorch-github-74404&#34;&gt;Example: PyTorch, GitHub #74404&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch
from torch import nn

class MyModule(nn.Module):
    def __init__(self):
        super().__init__()
        self.module_list = nn.ModuleList([nn.Linear(1,1) for _ in range(10)])
        self.parameter_list = nn.ParameterList([nn.Parameter(torch.zeros(1)) for _ in range(10)])
    def forward(self, x):
        for m in self.module_list:
            x = m(x)
        return x

if __name__ == &#39;__main__&#39;:
    model = MyModule()
    optimize = True
    with torch.jit.optimized_execution(optimize):
      a = torch.jit.script(model, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;sub-api-fuzzing&#34;&gt;Sub-API Fuzzing&lt;/h3&gt;
&lt;p&gt;Under Python APIs: C++ codes&lt;/p&gt;
&lt;p align=left&gt;Idea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most bugs come from missing validations/boundary argument values.&lt;/li&gt;
&lt;li&gt;The propagation chain of a bug: fault $\to$ error $\to$ failure&lt;/li&gt;
&lt;li&gt;#error &amp;gt; #failure&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=left&gt;Open the state machine&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;example-assertion-injections&#34;&gt;Example: assertion injections&lt;/h3&gt;
&lt;p align=left&gt;TensorFlow: CVE-2022-21725 (division by 0)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;int64_t GetOutputSize(const int64_t input, const int64_t filter,
                      const int64_t stride, const Padding&amp;amp; padding) {
+ assert(stride != 0);
  if (padding == Padding::VALID) {
    return (input - filter + stride) / stride;  // what if stride = 0 ?
  } else {  // SAME.
    return (input + stride - 1) / stride;
  }
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;example-assertion-injections-1&#34;&gt;Example: assertion injections&lt;/h3&gt;
&lt;p align=left&gt;TensorFlow: CVE-2022-21728 (heap OOB)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;static DimensionHandle DimKnownRank(ShapeHandle s, int64_t idx) {
+ assert(-s-&amp;gt;dims_.size() &amp;lt;= idx &amp;amp;&amp;amp; idx &amp;lt; s-&amp;gt;dims_.size());
  CHECK_NE(s-&amp;gt;rank_, kUnknownRank);
  if (idx &amp;lt; 0) {
    return s-&amp;gt;dims_[s-&amp;gt;dims_.size() + idx];
  }
  return s-&amp;gt;dims_[idx];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;example-assertion-injections-2&#34;&gt;Example: assertion injections&lt;/h3&gt;
&lt;p align=left&gt;TensorFlow: CVE-2022-23589 (null pointer dereference)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;NodeDef* mul_left_child = node_map_-&amp;gt;GetNode(node-&amp;gt;input(0));
NodeDef* mul_right_child = node_map_-&amp;gt;GetNode(node-&amp;gt;input(1));
+ assert(mul_left_child != NULL &amp;amp;&amp;amp; mul_right_child != NULL);
const bool left_child_is_constant = IsReallyConstant(*mul_left_child);
const bool right_child_is_constant = IsReallyConstant(*mul_right_child);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://kristoff-starling.github.io/slides/20220907/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/slides/20220907/</guid>
      <description>&lt;h2 id=&#34;atheris-automation&#34;&gt;Atheris Automation&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;methodology&#34;&gt;Methodology&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Use FreeFuzz&amp;rsquo;s tests as templates&lt;/li&gt;
&lt;li&gt;Substitute concrete values with appropriate functions
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arg_1 = 56          --&amp;gt; arg_1 = fh.get_int()
arg_1 = [-1.0, 6.0] --&amp;gt; arg_1 = fh.get_float_list()
padding = &#39;VALID&#39;   --&amp;gt; padding = fh.get_string(type=padding)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;An Example:
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def TestOneInput(data):
    fh = FuzzingHelper(data)
    arg_0_tensor = fh.get_random_tensor(
        shape=None,
        dtype_set=[tf.float16, tf.float32, tf.float64, 
                   tf.int32, tf.int64],
        min_size=1,
        max_size=8)
    arg_0 = tf.identity(arg_0_tensor)
    dtype = tf.float16
    _ = tf.cast(arg_0,dtype=dtype,)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p align=left&gt;Issue: lots of APIs contains hidden specifications.&lt;/p&gt;
&lt;p align=left&gt;Example: tf.nn.conv2d()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specification:
&lt;ul&gt;
&lt;li&gt;The input tensor may have rank 4 or higher.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt; should be in &lt;code&gt;{&#39;VALID&#39;, &#39;SAME&#39;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A dummy test such as
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arg_0 = fh.get_random_tensor()
arg_1 = fh.get_random_tensor()
strides = fh.get_int()
padding = fh.get_string()
_ = tf.nn.conv2d(arg_0,arg_1,strides=strides,padding=padding,)
&lt;/code&gt;&lt;/pre&gt;
will fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p align=left&gt;Solution: use FreeFuzz to find specifications through trials and errors.&lt;/p&gt;
&lt;p align=left&gt;Example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goal: Identify whether the API accepts negative inputs.&lt;/li&gt;
&lt;li&gt;Steps:
&lt;ul&gt;
&lt;li&gt;Obtain a valid FreeFuzz test.&lt;/li&gt;
&lt;li&gt;Substitute the argument with &amp;ldquo;-1&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Execute the modified tests and try to catch exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int/float&lt;/code&gt;: value range&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int/float&lt;/code&gt; list: length, negative value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;: special names (reduction/padding/activation/channel)&lt;/li&gt;
&lt;li&gt;Tensor: dtype, shape(length, value range)&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=left&gt;Sometimes, two lists/tensors are required to have the same length/dimension. In this situation, we analyze the structure of an invocation and try to add restrictions on arguments on the same level.
&lt;hr&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;success-rate&#34;&gt;Success Rate&lt;/h3&gt;
&lt;p align=left&gt;(Here success means that the test terminates without &#34;InvalidArgument&#34; errors.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before specification learning: &amp;lt;50%&lt;/li&gt;
&lt;li&gt;After specification learning: 478/533, 89.6%&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;coverage&#34;&gt;Coverage&lt;/h3&gt;
&lt;p align=left&gt;5 untrivial APIs were selected for coverage test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tf.random.stateless_parameterized_truncated_normal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.optimizers.schedules.ExponentialDecay&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.keras.layers.SpatialDropout3D&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.keras.layers.Convolution3DTranspose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tf.keras.initializers.LecunNormal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=left&gt;150 tests were generated for each API&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;coverage-1&#34;&gt;Coverage&lt;/h3&gt;
&lt;p align=left&gt;The dummy test&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import tensorflow as tf
&lt;/code&gt;&lt;/pre&gt;
&lt;p align=left&gt;covers 70005 lines. Besides that,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FreeFuzz&amp;rsquo;s tests cover 1151 lines.&lt;/li&gt;
&lt;li&gt;Atheris&amp;rsquo;s tests cover 1040 lines.&lt;/li&gt;
&lt;li&gt;1038 of which are common.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;current-problems&#34;&gt;Current Problems&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We cannot learn complicated specifications through simple experiments.
&lt;ul&gt;
&lt;li&gt;FreeFuzz itself is not very stable: some tests rely on random seeds to run normally.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We haven&amp;rsquo;t found bugs through these tests.
&lt;ul&gt;
&lt;li&gt;Some OOM bugs have been caught but it seems that they are false positive bugs due to my local machine limitations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://kristoff-starling.github.io/slides/20220923/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/slides/20220923/</guid>
      <description>&lt;h2 id=&#34;cc-coverage&#34;&gt;C/C++ Coverage&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;
&lt;hr&gt;
&lt;p align=left&gt;
We found that running programs with Atheris will not produce coverage information, i.e. &#34;.gcda&#34; files. Jiawei has created an issue in Atheris&#39;s GitHub repository.
&lt;/p&gt;
&lt;p align=left&gt;
We manage to walk around this issue by tracing the bytes generated by Atheris and replay the tests natively.
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;hr&gt;
&lt;p align=left&gt;5 APIs, 100 tests under FreeFuzz &amp; Atheris&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many lines are covered.&lt;/li&gt;
&lt;li&gt;How many lines are covered only by FreeFuzz/Atheris.&lt;/li&gt;
&lt;li&gt;How many lines are executed more.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;tf.keras.initializers.LecunNormal&lt;/code&gt;&lt;/p&gt;
&lt;p align=left&gt;Overall:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;211&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2390&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6447&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;105&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1468&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6342&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p align=left&gt;TensorFlow:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;109&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1080&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3735&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;33&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;884&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3659&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;tf.keras.layers.Convolution3DTranspose&lt;/code&gt;&lt;/p&gt;
&lt;p align=left&gt;All:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More Execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;192&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5884&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16423&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;163&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1457&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16394&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p align=left&gt;TensorFlow:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More Execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;80&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2907&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5649&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;461&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5580&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;tf.optimizers.schedules.ExponentialDecay&lt;/code&gt;&lt;/p&gt;
&lt;p align=left&gt;All:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More Execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;194&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2307&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6511&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;117&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2383&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6434&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p align=left&gt;TensorFlow:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More Execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;166&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1340&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3872&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1311&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3720&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;tf.losses.CategoricalHinge&lt;/code&gt;&lt;/p&gt;
&lt;p align=left&gt;All:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More Execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;34&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;181&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7045&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;52&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3136&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7064&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p align=left&gt;TensorFlow:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4171&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1871&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4153&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;tf.math.reduce_sum&lt;/code&gt;&lt;/p&gt;
&lt;p align=left&gt;All:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More Execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;589&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2955&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7247&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;178&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1992&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6838&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p align=left&gt;TensorFlow:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Unique&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;More Execution&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Total&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeFuzz&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;350&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1805&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4257&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Atheris&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;57&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;994&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3965&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://kristoff-starling.github.io/slides/20220930/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/slides/20220930/</guid>
      <description>&lt;h2 id=&#34;scalability&#34;&gt;Scalability&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1000 times for each API (FreeFuzz&amp;rsquo;s standard)&lt;/li&gt;
&lt;li&gt;Including invalid inputs&lt;/li&gt;
&lt;li&gt;Total coverage (including C++&amp;rsquo;s libraries)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;coverage&#34;&gt;Coverage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;209 APIs were tested.&lt;/li&gt;
&lt;li&gt;Approximately 150 new lines per API.&lt;/li&gt;
&lt;li&gt;4158 new lines are covered, 567 of which are &amp;ldquo;completely new&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;speed&#34;&gt;Speed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Approximately 5 min per API (with coverage test) :(&lt;/li&gt;
&lt;li&gt;Several seconds per API (generate tests only)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;optimization&#34;&gt;Optimization&lt;/h2&gt;
&lt;hr&gt;
&lt;p align=left&gt;Three strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Successful-execution path:
&lt;ul&gt;
&lt;li&gt;Leverage FreeFuzz&amp;rsquo;s mutation strategies. (working)&lt;/li&gt;
&lt;li&gt;Non-aggresive argument generation (with learned specifications)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error-handling path:
&lt;ul&gt;
&lt;li&gt;Aggresive argument generation (no specification)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;atheris-test-framework&#34;&gt;Atheris Test Framework&lt;/h3&gt;
&lt;p align=left&gt;Example: tf.tile&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def TestOneInput(data):
    fh = FuzzingHelper(data)
    aggresive = False if fh.random_dice(0.3) else True
    follow_freefuzz = False if fh.random_dice(0.6) else True
    arg_0_tensor = get_argument_arg_0_tensor(
        name=&#39;arg_0_tensor&#39;, fh, 
        aggresive=aggresive, follow_freefuzz=follow_freefuzz)
    arg_0 = tf.identity(arg_0_tensor)
    arg_1 = get_argument_arg_1(
        name=&#39;arg_1&#39;, fh, 
        aggresive=aggresive, follow_freefuzz=follow_freefuzz)
    _ = tf.tile(arg_0, arg_1,)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;atheris-test-framework-contd&#34;&gt;Atheris Test Framework (cont&amp;rsquo;d)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_argument_arg_0_tensor(name, fh, aggresive=False, follow_freefuzz=False):
    global argument_dict
    if name not in argument_dict:
        follow_freefuzz = False
    if follow_freefuzz is True:
        res = fh.mutate(argument_dict[name])
    elif not aggresive:
        res = fh.get_random_tensor(shape=None, 
            dtype_set=[tf.float16, tf.float32, tf.float64, tf.int32, tf.int64], 
            min_size=3, max_size=3)
    else:
        res = fh.get_random_tensor()
    argument_dict[name] = res
    return res
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://kristoff-starling.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-academic&#34;&gt;Create slides in Markdown with Academic&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic&lt;/a&gt; | 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment &amp;quot;weight&amp;quot;=1%}} One {{% /fragment %}}
{{% fragment &amp;quot;weight&amp;quot;=1%}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
   One 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   **Two** 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three 
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://spectrum.chat/academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
