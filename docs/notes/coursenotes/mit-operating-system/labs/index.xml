<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Labs | Yuyao Wang&#39;s Homepage</title>
    <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/</link>
      <atom:link href="https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/index.xml" rel="self" type="application/rss+xml" />
    <description>Labs</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Labs</title>
      <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/</link>
    </image>
    
    <item>
      <title>MIT-6.S081 Lab 06: Copy-on-write fork</title>
      <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab06/</guid>
      <description>&lt;h2 id=&#34;progress&#34;&gt;Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement copy-on write (hard)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;implement-copy-on-write&#34;&gt;Implement Copy-on Write&lt;/h2&gt;
&lt;p&gt;写时拷贝 fork 的大体思路是：在 fork 时不为子进程创建新的页面，而是让子进程指向父进程的所有页面，并将页面的权限改为只读。将来如果某个进程 (父/子) 需要修改页面，会发生 page fault exception，在 kernel 的处理程序中，如果是 COW page，则新分配一个页面，将当前的只读页面内容复制过去，让当前进程的页表指向这个新的页面并将权限设置为可读可写。&lt;/p&gt;
&lt;h3 id=&#34;kallockfree&#34;&gt;kalloc()/kfree()&lt;/h3&gt;
&lt;p&gt;引入了 copy-on write 之后，一个物理页面可能会被多个进程的页表指向，这使得 kfree() 变得困难：某个进程被释放时，它拥有的物理页面不能被直接释放，否则别的进程就用不了这个页面了。我们需要为每个页面维护一个 reference count，只有一个页面的 reference count 为 0 了才能释放它。&lt;/p&gt;
&lt;p&gt;维护 reference count 的时机很有讲究。笔者最初使用的方案是在“映射“和“解除映射”的时候修改 reference count，即在 mappages() 函数、 uvmunmap() 函数和 COW 相关函数中修改 reference count。但 xv6 中对 mappages() 的用法比较灵活，例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void
kvminit()
{
  ......
  // map kernel data and the physical RAM we&#39;ll make use of.
  kvmmap((uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
  ......
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述 kvmmap() 会对所有的物理页面做一个恒等映射。其实内核并没有真正拥有这些页面，做 mappages() 时，真实分配好的页面是不存在的，在 kvmmap() 中做这一步只是为了简化内核代码的书写 (如在调用 memmove() 时不需要在软件中跑一遍内核页表)。因此如果在 mappages() 的时候维护 reference count，会得到不正确的结果。&lt;/p&gt;
&lt;p&gt;一个合理的解决方案是在 COW 相关函数中增加 reference count，在 kfree() 中减少 reference count。kalloc() 中新出厂的页面默认 reference count 为 1。&lt;/p&gt;
&lt;h3 id=&#34;uvmcopyuvmcow&#34;&gt;uvmcopy()/uvmcow()&lt;/h3&gt;
&lt;p&gt;我们需要修改 uvmcopy() 的实现，不为子进程分配新的页面，而是让子进程指向父进程的页面，更新父进程的 reference count，并设置页表项的标志位。这里要注意的是，除了取消页面的 PTE_W，为了将 cow page 的异常和普通的越权修改异常区分开来，我们应当在页表项中标志一个 PTE_COW 位。RISC-V ISA 的页表项格式中，8，9,10 三位是 RSW 位，留给软件自由使用，我们可以利用这些位来标记 PTE_COW。&lt;/p&gt;
&lt;p&gt;uvmcow() 是 COW 导致的 page fault exception 的处理函数。我们应当分配一个新页面，新页面没有 PTE_COW 位，有 PTE_W 位，将原始页面的内容复制过来，并修改当前进程的页表。&lt;/p&gt;
&lt;h3 id=&#34;concurrency&#34;&gt;Concurrency&lt;/h3&gt;
&lt;p&gt;该实验中我们要开始面对并发 bug。&lt;code&gt;/kernel/kalloc.c&lt;/code&gt; 中的空闲页面链表是用 kmem.lock 保护起来的。与此同理，我们维护 reference count 的数组也应该用一把锁保护起来。我们当然可以使用 kmem.lock，但如果新建一把锁专门用于保护 reference count 数组 (甚至是每个 referenct count 的单元格) 可以获得更好的并行度。&lt;/p&gt;
&lt;p&gt;Concurrency bug 中常见的一种是 TOCTTOU (time to check to time to use)。笔者曾经遇到过 xv6 在单核情况下可以正常运行，在多核情况下内存不够用的问题。经过排查发现问题出在如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (krref(pa) == 1)
{
    *pte |= PTE_W;
    *pte &amp;amp;= (~PTE_COW);
}
else
{
  if ((mem = kalloc()) == 0) return -2;
  flags &amp;amp;= (~PTE_COW); flags |= (PTE_W);
  memmove(mem, (void *)pa, PGSIZE);
  kmref(pa, -1);
  if (mappages(pagetable, va, PGSIZE, (uint64)mem, flags) != 0) return -1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码的逻辑是：如果当前页面只剩一个 reference，就不必再申请新页面，而是直接修改一下本页面页表项的标志信息。否则当前页面有多个 reference，申请一个新页面并让当前进程指向它，调用 &lt;code&gt;kmref(pa,-1)&lt;/code&gt; 更新原页面的 reference count。&lt;/p&gt;
&lt;p&gt;这段代码的 bug 在于进入 else 分支后，&lt;code&gt;krref(pa)&amp;gt;=2&lt;/code&gt; 的假设不一定成立。假设有两个进程并发地执行该程序段且 pa 有且仅有两个 reference，那么两个进程都会通过 if 判断进入 else 分支，然后使用 kmref() 更新 reference count，这样 pa 页面的 reference count 变成了 0 但没有进程去 free 它，我们丢失了一个页面。这个 bug 触发次数越多，系统内可用的内存就越少。&lt;/p&gt;
&lt;p&gt;想要修复这个 bug，一种选择是给整个 if 语句上锁，另一种选择是不使用 if 并把 kmref() 改成 kfree() 或 uvmunmap()。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIT-6.S081 Lab 05: Lazy allocation</title>
      <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab05/</guid>
      <description>&lt;h2 id=&#34;progress&#34;&gt;Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Eliminate allocation from sbrk() (easy)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Lazy allocation (moderate)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Lazytests and Usertests (moderate)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;eliminate-allocation-from-sbrk-easy&#34;&gt;Eliminate allocation from sbrk() (easy)&lt;/h2&gt;
&lt;p&gt;该部分要做的事情很简单：在 &lt;code&gt;sbrk()&lt;/code&gt; 系统调用的处理函数中，不要分配内存，只修改进程的 sz 即可。由于我们只修改了 sz 而没有为新申请的空间绑定页面，所以当用户程序使用这块内存的时候 (load/store指令)，就会因为页表无法翻译虚拟地址而报 kernel panic。&lt;/p&gt;
&lt;h2 id=&#34;lazy-allocation-moderate&#34;&gt;Lazy allocation (moderate)&lt;/h2&gt;
&lt;p&gt;在该部分需要做的修改和注意事项在课上基本讲过，可以参考 Lecture 08 的课堂笔记。总体来说，我们需要在 usertrap() 中识别出缺页异常并写一个缺页异常的处理函数：申请一个物理页面，将导致错误的虚拟地址所在的虚拟页面映射过去。此外，由于延迟分配的存在，我们在 uvmunmap() 时释放的不一定是已经映射过的地址，应当取消其中的一些 panic 语句。&lt;/p&gt;
&lt;h2 id=&#34;lazytests-and-usertests-moderate&#34;&gt;Lazytests and Usertests (moderate)&lt;/h2&gt;
&lt;p&gt;在该部分我们要额外处理 &lt;code&gt;sbrk()&lt;/code&gt; 系统调用的一些细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当 &lt;code&gt;sbrk()&lt;/code&gt; 传入的参数是负数时，我们应当调用 uvmdealloc() 正常进行释放。uvmdealloc() 释放的虚拟页面可能已经映射了物理页面，可能还没有映射物理页面。我们在上一个部分中已经取消了 uvmunmap() 函数中对该内容的检查，所以没有问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 &lt;code&gt;sbrk()&lt;/code&gt; 进行了非法的操作，如引起错误的虚拟地址不在堆区范围内，或者内存不足、无法分配新物理页面，则杀死当前进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除了缺页异常中需要处理延迟分配的问题，&lt;code&gt;read()&lt;/code&gt; / &lt;code&gt;write()&lt;/code&gt; 系统调用中也要处理延迟分配问题。该系统调用的函数调用路径 (以 write() 为例) 为  sys_write() $\rightarrow$ filewrite() $\rightarrow$ writei() $\rightarrow$ either_copyin() $\rightarrow$ copyin() $\rightarrow$  walkaddr()。内核为了在内核空间和用户空间之间传递数据，会调用 copyin()/copyout()/copyinstr()。这些函数会抓着用户虚拟地址在用户页表中进行一次 page table walk，以翻译出其物理地址。该过程中可能会因为延迟分配的问题翻译失败，我们要判断这种情况，并进行分配，代码细节和 usertrap() 中的非常类似，但需要注意的是由于 usertests 的设置问题，&lt;u&gt;在 walkaddr() 中遇到非法情况不能直接杀死进程&lt;/u&gt;。&lt;/p&gt;
&lt;p&gt;(注：事实上，如果将 lab pgtbl 中的代码添加进来，用户进程和内核共用一份页表，就可以由硬件完成所有的 page table walk，延迟分配的处理函数也只需要写一遍。)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该实验中还有如下的几个细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;笔者查阅了一些网上的代码，发现它们处理 “用户栈地址” 的方式各不相同：有的人使用 p-&amp;gt;kernel_sp，这实际上是进程的内核栈的栈顶地址。有的人使用 p-&amp;gt;trapframe-&amp;gt;sp，这是用户进程在陷入内核时的用户栈指针，由于用户栈此时不一定空，所以 p-&amp;gt;trapframe-&amp;gt;sp 并不一定指向栈底。从严谨的角度来说，获取栈底地址应该使用 &lt;code&gt;PGROUNDUP(p-&amp;gt;trapframe-&amp;gt;sp)&lt;/code&gt;。笔者采用的另一种稍愚笨一些的方法为：在 proc 结构体中新建一个 ustack 变量，在 &lt;code&gt;exec()&lt;/code&gt; 系统调用中把用户栈底的地址保存在其中。&lt;/li&gt;
&lt;li&gt;该实验中对于边界情况的判断要格外小心，usertest 中有很多针对边界情况的测试。p-&amp;gt;sz，即 program break，指向的是用户内存顶部的下一个地址，第一个未被使用的地址，因此判断合法范围时一定是 &lt;code&gt;va &amp;lt; p-&amp;gt;sz&lt;/code&gt;。此外 &lt;code&gt;PGROUNDUP(p-&amp;gt;trapframe-&amp;gt;sp)&lt;/code&gt; 得到的地址为用户栈底地址的下一位，因此下界一定是 &lt;code&gt;PGROUNDUP(p-&amp;gt;trapframe-&amp;gt;sp) &amp;lt;= va&lt;/code&gt; 。(usertest 中的 copyinstr3 测试了当参数字符串的结束符处于未分配空间时程序是否能返回 -1)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MIT-6.S081 Lab 03: Page tables</title>
      <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab03/</guid>
      <description>&lt;h2 id=&#34;progress&#34;&gt;Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Print a page table (easy)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; A kernel page table per process (hard)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Simplify &lt;code&gt;copyin/copyinstr&lt;/code&gt; (hard)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;print-a-page-table-easy&#34;&gt;Print a page table (easy)&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;/kernel/vm.c&lt;/code&gt; 中新建一个函数 vmprint() 用于打印页表信息。为了方便编码，笔者在 &lt;code&gt;/kernel/vm.c&lt;/code&gt; 中又定义了一个函数 vmprint_recursive()，该函数不仅接收页表地址，还接收一个 layer 参数，用于确定打印信息时在前面加多少组 &lt;code&gt;..&lt;/code&gt;。vmprint_recursive() 遍历传入页表的 512 个页表项，如果页表项的 PTE_V 位为 1 (页表存在) ，则打印页表项的值和其对应的物理地址。如果当前页表项不是底层页表项 (叶子节点)，就递归地继续打印。我们可以根据页表项的标志信息来判断它是不是叶子节点：叶子节点的页表项除了 PTE_V 还会有其他的 RWXU 等权限位，而各级页目录页表项只有 PTE_V 为 1。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Explain the output of &lt;code&gt;vmprint&lt;/code&gt; in terms of Fig 3-4 from the text.  What does page 0 contain? What is in page 2? When running in user mode, could the process read/write the memory mapped by page 1?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第 0 个页面存储了用户的代码段和数据段，第 2 个页面是用户栈。在用户态下，进程不能读写第 1 个页面，因为根据第一个页面的页表项，其 PTE_U 位为 0，用户态无访问权限 (第 1 个页面是用户栈下方的保护页面，在创建后通过 uvmclear() 函数清除了 PTE_U 位)。&lt;/p&gt;
&lt;h2 id=&#34;a-kernel-page-table-per-process-hard&#34;&gt;A kernel page table per process (hard)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;根据 RISC-V 架构的约定，page table walk 的工作理应交给硬件完成，那么为什么 xv6 中要有 walkaddr() 这样的函数来在软件层面进行 page table walk呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;xv6 中当用户陷入内核态时，satp 寄存器会切换到内核页表。内核页表中只有内核部分的映射，因此在内核态中如果想要访问用户内存中的数据，就必须在软件层面进行虚拟地址的翻译：抓着用户页表和用户虚拟地址调用 walkaddr() 函数获得物理地址，再拿着物理地址进行操作 (内核页表是恒等映射，因此这个物理地址也可以当做 &amp;ldquo;虚拟地址&amp;rdquo; 使用)。&lt;/p&gt;
&lt;p&gt;该实验部分和下一个实验部分的目的是：为每一个进程创建一个“用户内核页表”。该页表的内核部分映射与内核页表相同，用户部分映射与用户页表相同。这样用户进程从用户态陷入内核态时，不再切换到内核页表，而是切换到本进程的“用户内核页表”，这样在内核中执行操作时，页表中包含用户部分的映射，用户部分虚拟地址的翻译就可以交给硬件做了。&lt;/p&gt;
&lt;p&gt;该实验部分主要负责完成用户内核页表的内核部分的映射。根据提示内容，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add a field to &lt;code&gt;struct proc&lt;/code&gt; for the process&amp;rsquo;s kernel page table.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 &lt;code&gt;struct proc&lt;/code&gt; 中添加一个 pagetable_t 类型的变量 k_pagetable 来存储用户内核页表。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A reasonable way to produce a kernel page table for a new process  is to implement a modified version of &lt;code&gt;kvminit&lt;/code&gt; that makes  a new page table instead of modifying &lt;code&gt;kernel_pagetable&lt;/code&gt;.  You&amp;rsquo;ll want to call this function from &lt;code&gt;allocproc&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者起初认为：为什么不让每个进程的 k_pagetable 直接指向 kernel_pagetable 呢？这样就省去了为每个进程做映射的工作？如果理解了整个实验的目的，我们就会明白这是不合理的。我们的目的不仅是完成内核映射，还要让这份页表同时拥有该进程的用户映射，内核中的原始份内核页表无法将各个进程的用户映射都存下来 (彼此冲突)。这样做也许可以通过这个实验部分，但将在下一个实验部分走入死胡同。&lt;/p&gt;
&lt;p&gt;正确的做法是仿照 kvminit() 函数写一份初始化映射，将页表基地址保存在 p-&amp;gt;k_pagetable 中。allocproc() 函数在 userinit() 和 fork() 中被调用，负责创建一个新进程。我们在 allocproc() 中调用用户内核页表的初始化映射函数即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure that each process&amp;rsquo;s kernel page table has a mapping  for that process&amp;rsquo;s kernel stack. In unmodified xv6, all the  kernel stacks are set up in &lt;code&gt;procinit&lt;/code&gt;. You will need to  move some or all of this functionality to &lt;code&gt;allocproc&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者没有动 procinit() 的代码，即内核页表中有所有进程内核栈的映射，并准备在每个进程的用户内核页表中映射自己进程的内核栈地址。这里笔者犯的错误是：在 allocproc() 中又 kalloc() 了一个新的页面作为用户栈。这样用户内核页表中的用户栈和内核页表中的用户栈实际上指向了不同的物理页面实体。我们要时刻记住&lt;strong&gt;用户内核页表只应该复制映射，映射应该指向相同的实体&lt;/strong&gt;，这样陷入内核态之后才能看到页面中的改变。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modify &lt;code&gt;scheduler()&lt;/code&gt; to load the process&amp;rsquo;s kernel page table into  the core&amp;rsquo;s &lt;code&gt;satp&lt;/code&gt; register (see &lt;code&gt;kvminithart&lt;/code&gt; for  inspiration). Don&amp;rsquo;t forget to call &lt;code&gt;sfence_vma()&lt;/code&gt;  after calling &lt;code&gt;w_satp()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scheduler()&lt;/code&gt; should use &lt;code&gt;kernel_pagetable&lt;/code&gt; when  no process is running.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是笔者感到迷茫的部分，因为根据课程 schedule 的进度，做该实验时理应还没有看中断部分的内容，所以笔者对 scheduler() 函数的意义很不了解。经过大致的摸索，核心循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;for(p = proc; p &amp;lt; &amp;amp;proc[NPROC]; p++) {
  acquire(&amp;amp;p-&amp;gt;lock);
  if(p-&amp;gt;state == RUNNABLE) {
    // Switch to chosen process.  It is the process&#39;s job
    // to release its lock and then reacquire it
    // before jumping back to us.
    p-&amp;gt;state = RUNNING;
    c-&amp;gt;proc = p;
    swtch(&amp;amp;c-&amp;gt;context, &amp;amp;p-&amp;gt;context);

    // Process is done running for now.
    // It should have changed its p-&amp;gt;state before coming back.
    c-&amp;gt;proc = 0;

    found = 1;
  }
  release(&amp;amp;p-&amp;gt;lock);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;负责找到第一个处于 RUNNABLE 状态的进程，然后将其状态设置为 RUNNING，并通过 swtch() 函数切换过去。也就是说，执行完 swtch 之后，xv6 就会转去执行进程 p (此时仍然在内核态中)，因此应该在 swtch() 之前将 satp 寄存器改写为 p 进程的用户内核页表。&lt;/p&gt;
&lt;p&gt;一个进程运行完毕后，会返回到 swtch 的下一条语句执行，这时候 CPU 核处于没有进程运行的状态。因此应该在 swtch() 之后调用 kvminithart() 函数将 satp 寄存器改写为内核页表。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Free a process&amp;rsquo;s kernel page table in &lt;code&gt;freeproc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need a way to free a page table without also freeing the leaf physical memory pages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;freeproc() 函数负责进程的释放。其中 proc_freepagetable() 函数负责将该进程的用户页表释放。我们需要再写一个函数将用户内核页表也释放。注意用户内核页表的实体是那些内核物理页面和该进程的用户物理页面。该进程的用户物理页面已经随着用户页表的释放而释放了，而内核物理页面不能被释放，否则内核代码就消失了。因此我们不能直接调用 proc_freepagetable()，而要再写一个 proc_freekpagetable()。&lt;/p&gt;
&lt;p&gt;此外，proc_freepagetable() 中调用的 freewalk() 函数负责递归地释放所有的页表页面，该函数默认底层的物理页面已经被释放，如果不符合要求会触发 kernel panic。但在用户内核页表页面的释放过程中底层的 (内核) 物理页面是没有被释放的，因此不能直接调用 freewalk() 函数，而要仿照它再写一个不会对底层物理页面存在报错的 kfreewalk()。&lt;/p&gt;
&lt;h2 id=&#34;simplify-copyincopyinstr-hard&#34;&gt;Simplify &lt;code&gt;copyin/copyinstr&lt;/code&gt; (hard)&lt;/h2&gt;
&lt;p&gt;该实验部分承接上一个实验部分，要补全用户内核页表的用户部分的映射。我们只要做到 xv6 中任何对用户页表有修改的地方，我们在用户内核页表中将这些修改的映射抄一份即可。这里务必要注意的一点是：&lt;strong&gt;用户页表中会申请新的物理页面，但我们不应该在用户内核页表中也申请新的页面，而是应该映射到用户页表申请的物理页面&lt;/strong&gt;。只有这样我们才能在陷入内核态时访问到用户态时保存的数据。&lt;/p&gt;
&lt;p&gt;xv6 涉及用户页表修改的有三处：fork()，exec()，和 growproc()。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fork() 函数会申请一个新的进程，调用 uvmcopy() 函数将父进程的用户页表复制给子进程的用户页表。注意：我们不能调用 uvmcopy() 来将父进程的用户页表内容复制到子进程的用户内核页表。因为父进程和子进程互相独立，所以 uvmcopy() 在复制的时候不仅复制页表内容，所有底层的物理页面也申请了新的并复制了一遍 (在 copy-on-write fork 中这一点会得到改善)。我们的用户内核页表是不应该将底层物理页面复制的。&lt;strong&gt;子进程的用户内核页表一定要抄子进程的用户页表，映射到子进程的用户页表的物理页面上&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exec() 函数根据 ELF 文件创建了一个新的内存镜像，并用新的页表替换旧的页表。在用户进程页表中我们也应该进行相对应的更新：首先将旧页表相关的映射删除 (这里需要格外小心的一点是：exec() 调用 proc_freepagetable() 释放旧页表时，已经将旧页表的底层物理页面一并释放了，我们在删除用户内核页表中的旧页表内容时，不需要再释放一遍底层物理页面，只需要清除相关的页表项即可。)，然后将新页表的映射抄进用户内核页表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;growproc() 函数根据 n 的正负分别调用 uvmalloc() 和 uvmdealloc() 来调整用户内存的大小。我们在用户内核页表中也应该进行相对应的更新。对于 uvmalloc() 来说，要注意用户内核页表要映射到用户页表创建的那些物理页面中，为此笔者写了一个类似于 uvmcopy() 的函数来进行复制。对于 uvmdealloc() 来说，要注意用户页表负责释放底层物理页面，用户内核页表不能做重复的事。&lt;/p&gt;
&lt;p&gt;(注：内核部分映射和用户部分映射可以合二为一的重要前置条件是两者没有重复的映射。根据 xv6 手册，低于 0x80000000 的很多部分的内存是作为外设地址的。因此用户实际可用的内存空间其实远小于 MAXVA。式样讲义规定用户只能使用 PLIC 以下的地址。但事实上 CLINT 映射的地址比 PLIC 还要低，实验证明如果不取消 CLINT 的映射，用户内存会覆盖到这部分，触发 &amp;lsquo;remap&amp;rsquo; kernel panic。因此笔者只能在用户内核页表的映射中将 CLINT 移除。)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;What permissions do the PTEs for user addresses need in a process&amp;rsquo;s kernel page table?  (A page    with &lt;code&gt;PTE_U&lt;/code&gt; set cannot be accessed in kernel mode.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用户内核页表的页表项不能照抄用户页表，因为 QEMU 模拟的 RISC-V 硬件在内核态下是不能访问带有 PTE_U 位的页面的。因此用户内核页表的底层页表项都要将 PTE_U 挖去。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIT-6.S081 Lab 02: System calls</title>
      <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab02/</guid>
      <description>&lt;h2 id=&#34;progress&#34;&gt;Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; System call tracing (moderate)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Sysinfo (moderate)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;system-call-tracing-moderate&#34;&gt;System call tracing (moderate)&lt;/h2&gt;
&lt;p&gt;该实验可以对 xv6 中系统调用的过程有一个大致的了解。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;/user/trace.c&lt;/code&gt; 中，程序解析了 &lt;code&gt;trace()&lt;/code&gt; 后的所有，将 trace 之后的那一个数字作为 trace 的参数，剩下的作为另外的一条命令调用 &lt;code&gt;exec()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trace()&lt;/code&gt; 函数是用 assembly 写的，由 &lt;code&gt;/user/usys.pl&lt;/code&gt; 生成。&lt;code&gt;/user/usys.pl&lt;/code&gt; 是一个脚本，内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl -w

# Generate usys.S, the stubs for syscalls.

print &amp;quot;# generated by usys.pl - do not edit\n&amp;quot;;

print &amp;quot;#include \&amp;quot;kernel/syscall.h\&amp;quot;\n&amp;quot;;

sub entry {
    my $name = shift;
    print &amp;quot;.global $name\n&amp;quot;;
    print &amp;quot;${name}:\n&amp;quot;;
    print &amp;quot; li a7, SYS_${name}\n&amp;quot;;
    print &amp;quot; ecall\n&amp;quot;;
    print &amp;quot; ret\n&amp;quot;;
}
	
entry(&amp;quot;fork&amp;quot;);
entry(&amp;quot;exit&amp;quot;);
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于每一个系统调用，它会生成一个函数，将系统调用号 SYS_name 放到 &lt;code&gt;a7&lt;/code&gt; 寄存器中，然后使用 &lt;code&gt;ecall&lt;/code&gt; 陷入内核。根据 calling convention，剩下的系统调用参数放在 &lt;code&gt;a0&lt;/code&gt; &lt;code&gt;a1&lt;/code&gt; …… 寄存器中，因为和 &lt;code&gt;trace.c&lt;/code&gt; 中准备参数的过程相同，所以不需要额外再做一次参数准备。&lt;/p&gt;
&lt;p&gt;硬件提升完特权级后，根据 &lt;code&gt;stvec&lt;/code&gt; 寄存器的值进行地址跳转，&lt;code&gt;stvec&lt;/code&gt; 内保存的地址是 &lt;code&gt;/kernel/trampoline.S&lt;/code&gt; 中的 &lt;code&gt;uservec&lt;/code&gt;。&lt;code&gt;uservec&lt;/code&gt; 是用 assembly 写的，保存了上下文，并跳转到 &lt;code&gt;/kernel/trap.c&lt;/code&gt; 中的函数 &lt;code&gt;usertrap&lt;/code&gt;。&lt;code&gt;usertrap&lt;/code&gt; 根据 &lt;code&gt;scause&lt;/code&gt; 寄存器的值，认定这是一个系统调用，于是转到 &lt;code&gt;/kernel/syscall.c&lt;/code&gt; 中的函数 &lt;code&gt;syscall&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;syscall&lt;/code&gt; 根据 &lt;code&gt;a7&lt;/code&gt; 寄存器的值获取系统调用号，并执行相应的系统调用服务程序（所有的服务程序都存在 syscalls[] 数组中）。&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;trace()&lt;/code&gt; 系统调用来说，我们需要注册一个函数 &lt;code&gt;sys_trace()&lt;/code&gt; 。xv6 提供了一系列函数来获取系统调用的参数（本质上是根据 calling convention 提取寄存器的值），&lt;code&gt;argint()&lt;/code&gt; 用于获取值，&lt;code&gt;argaddr()&lt;/code&gt; 用于获取地址，&lt;code&gt;argstr()&lt;/code&gt; 用于获取字符串（本质上是对寄存器的值进行了不同的类型解释）。我们需要在 proc 结构体中新定义一个变量来存储 trace mask，将参数取出放进这个变量即可。&lt;/p&gt;
&lt;p&gt;此外，在 &lt;code&gt;syscall&lt;/code&gt; 中，每执行完一个系统调用准备返回时，我们要根据 trace mask 决定是否将其相关的信息打印。我们需要额外准备一个数组存储所有系统调用的名字，进程号可以通过 p-&amp;gt;pid 获得。&lt;/p&gt;
&lt;p&gt;根据讲义的定义，父进程 fork 出的子进程要继承 trace mask，因此需要修改一下 fork 函数的代码，将 p-&amp;gt;tMask 复制给 np-&amp;gt;tMask 即可。&lt;/p&gt;
&lt;h2 id=&#34;sysinfo-moderate&#34;&gt;Sysinfo (moderate)&lt;/h2&gt;
&lt;p&gt;该实验与上一个实验的主要不同在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sysinfo(struct sysinfo *)&lt;/code&gt; 系统调用需要将信息写回到 user space 的结构体中，因此需要从 kernel space 向 user space 复制信息，可以参考 &lt;code&gt;fstat()&lt;/code&gt; 系统调用的实现来运用 &lt;code&gt;copyout()&lt;/code&gt; 函数，由于目前还未实现虚拟存储相关细节，故不深究 &lt;code&gt;copyout()&lt;/code&gt; 的具体原理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前进程的个数很好统计，进程信息保存在 &lt;code&gt;/kernel/proc.c&lt;/code&gt; 的 proc[] 数组里，proc[] 数组的每个元素是一个 proc 结构体，只要结构体的 state 变量不是 UNUSED 就是一个当前的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前剩余的内存统计稍为复杂。xv6 实现了分页机制，&lt;code&gt;/kernel/kalloc.c&lt;/code&gt; 负责物理内存的分配和释放。具体的组织形式和各个函数的意义见 Xv6 源码解读手册。&lt;/p&gt;
&lt;p&gt;要实现剩余内存的统计，我们只要数一数 freelist 链表中有多少个页面即可。可以每次现场数一遍，也可以维护一个变量，在 &lt;code&gt;kalloc()&lt;/code&gt; 和 &lt;code&gt;kfree()&lt;/code&gt; 的时候动态统计空闲页面的个数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MIT-6.S081 Lab 07: Multithreading</title>
      <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab07/</guid>
      <description>&lt;h2 id=&#34;progress&#34;&gt;Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Uthread: switching between threads (moderate)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Using threads (moderate)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Barrier (moderate)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uthread-switching-between-threads-moderate&#34;&gt;Uthread: Switching Between Threads (moderate)&lt;/h2&gt;
&lt;p&gt;该实验要实现一个“用户态协程库”，每个协程通过 yield() 函数主动让出 CPU 来让其他协程运行。笔者定义了如下的结构体：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct thread {
  char            stack[STACK_SIZE]; /* the thread&#39;s stack */
  int             state;             /* FREE, RUNNING, RUNNABLE */
  struct context *context;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 context 指针指向的地方用于存储和恢复寄存器现场，笔者的代码会利用堆栈低地址处的 &lt;code&gt;sizeof(struct context)&lt;/code&gt; 的空间来存放这个 context。&lt;/p&gt;
&lt;h3 id=&#34;thread_create&#34;&gt;thread_create()&lt;/h3&gt;
&lt;p&gt;类似于 xv6 中的设计，创建线程时我们要在 context 中伪造一个用于返回的寄存器现场：设置 ra 为目标函数地址，sp 为改线程的栈的地址即可。&lt;/p&gt;
&lt;p&gt;笔者曾经遇到一个非常难以理解的 bug：某函数的代码在运行过程中被修改，导致段错误。经过排查发现：笔者忘了为 main() 函数对应的线程设置 context 指针，context 指针默认初始值为 0，从而在第一次上下文切换时，main() 的上下文覆盖了代码段。我们应该在 thread_init() 中为 main() 的线程做好初始化。&lt;/p&gt;
&lt;p&gt;xv6 的用户进程中代码段是从 0 地址开始保存的，查看 &lt;code&gt;/kernel/exec.c&lt;/code&gt; 可知 xv6 通过 uvmalloc() 申请页面并将代码放入，uvmalloc() 也是 sbrk() 系统调用底层的函数，申请的页面默认是 R/W/X/U 的，所以用户进程有修改的权利 (加载时将代码段设置为不可写或许更容易暴露 bug)。&lt;/p&gt;
&lt;h3 id=&#34;thread_switch&#34;&gt;thread_switch()&lt;/h3&gt;
&lt;p&gt;这部分代码用汇编实现，可以完全参考 &lt;code&gt;/kernel/swtch.S&lt;/code&gt; 的实现。类似地，因为 thread_switch() 在 C 代码中被当作一个普通函数调用，编译器会帮我们保证 caller-saved registers 的封存 (栈上)，我们只需要保存 callee-saved registers 即可。&lt;/p&gt;
&lt;h3 id=&#34;thread_schedue&#34;&gt;thread_schedue()&lt;/h3&gt;
&lt;p&gt;该函数负责挑选一个 RUNNABLE 的线程，然后通过 thread_switch() 跳过去。&lt;/p&gt;
&lt;h3 id=&#34;thread_yield&#34;&gt;thread_yield()&lt;/h3&gt;
&lt;p&gt;该函数只需要将当前线程的状态改为 RUNNABLE，然后调用 thread_schedule() 即可。&lt;/p&gt;
&lt;h2 id=&#34;using-threads-moderate&#34;&gt;Using Threads (moderate)&lt;/h2&gt;
&lt;p&gt;该实验使用 Linux 的 pthread 线程库，是非常基础的带锁并发编程实验。为哈希表的每个 bucket 上一把锁就可以既保证正确性又通过速度测试。&lt;/p&gt;
&lt;h2 id=&#34;barrier-moderate&#34;&gt;Barrier (moderate)&lt;/h2&gt;
&lt;p&gt;该实验使用 Linux 的 pthread 线程库，是非常基础的条件变量编程实验。我们甚至不需要生产者-消费者模型——我们只要让先来的线程在条件变量上睡眠，最后一个到来的线程 broadcast 一下即可。&lt;/p&gt;
&lt;p&gt;一个小细节是我们要在 barrier() 中修改 round，但 round 只能被修改一次。我们可以让每个线程上来先保存一个旧的 round 值，然后被唤醒后每个线程上锁检查 round，只有看到 &lt;code&gt;old == new&lt;/code&gt; 的线程可以 +1。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIT-6.S081 Lab 04: Traps</title>
      <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab04/</guid>
      <description>&lt;h2 id=&#34;progress&#34;&gt;Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; RISC-V assembly (easy)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Backtrace (moderate)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Alarm (hard)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;risc-v-assembly-easy&#34;&gt;RISC-V assembly (easy)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: Which registers contain arguments to functions?  For example, which register holds 13 in main&amp;rsquo;s call to &lt;code&gt;printf&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;RISC-V 中，函数调用的参数按顺序存放在 &lt;code&gt;a0&lt;/code&gt; &lt;code&gt;a1&lt;/code&gt; &lt;code&gt;a2&lt;/code&gt; &lt;code&gt;a3&lt;/code&gt; …… 中。以 printf() 为例，13 是它的第三个参数，所以存放在 &lt;code&gt;a2&lt;/code&gt; 寄存器中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: Where is the call to function &lt;code&gt;f&lt;/code&gt; in the assembly code for main? Where is the call to &lt;code&gt;g&lt;/code&gt;?  (Hint: the compiler may inline functions.)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;汇编代码中没有直接调用函数 f() 和 g()，因为 f() 和 g() 是非常简单的函数，编译器对其做了优化，直接将 &lt;code&gt;f(8)+1&lt;/code&gt; 的结果 12 写入了寄存器 &lt;code&gt;a1&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: At what address is the function &lt;code&gt;printf&lt;/code&gt; located?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;printf() 函数的地址为 0x628。可以在 &lt;code&gt;call.asm&lt;/code&gt; 中直接搜索到，也可以通过 main() 函数的汇编代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;30:	00000097          	auipc	ra,0x0
34:	5f8080e7          	jalr	1528(ra) # 628 &amp;lt;printf&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看出 printf() 函数的地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: What value is in the register &lt;code&gt;ra&lt;/code&gt; just after the &lt;code&gt;jalr&lt;/code&gt; to &lt;code&gt;printf&lt;/code&gt; in &lt;code&gt;main&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ra&lt;/code&gt; 寄存器中存储的应该是 printf() 函数的返回地址。根据 RISC-V 手册中 &lt;code&gt;jalr&lt;/code&gt; 指令的定义，pc+4 的值会被写入 &lt;code&gt;ra&lt;/code&gt; 寄存器。因此当前 &lt;code&gt;ra&lt;/code&gt; 的值为 0x38。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: Run the following code.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;	unsigned int i = 0x00646c72;
	printf(&amp;quot;H%x Wo%s&amp;quot;, 57616, &amp;amp;i);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What is the output? 
&lt;a href=&#34;http://web.cs.mun.ca/~michael/c/ascii-table.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&amp;rsquo;s an ASCII table&lt;/a&gt; that maps bytes to characters.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set &lt;code&gt;i&lt;/code&gt; to in order to yield the same output? Would you need to change &lt;code&gt;57616&lt;/code&gt; to a different value?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
&lt;a href=&#34;http://www.webopedia.com/TERM/b/big_endian.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&amp;rsquo;s a description of little- and big-endian&lt;/a&gt; and 
&lt;a href=&#34;http://www.networksorcery.com/enp/ien/ien137.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a more whimsical description&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出的结果是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;He110 World
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一，十进制数 57616 转换成十六进制是 E110H。使用 &amp;ldquo;%x&amp;rdquo; 打印时，十六进制中的字母都是小写字母，所以第一处打印结果为 e110。&lt;/p&gt;
&lt;p&gt;第二，变量 i 的地址被传给了 printf()，printf() 会将该地址处的数据按照字符串类型进行解读，即每个字节按照 ASCII 码翻译成字符进行输出。RISC-V 是小端机器，因此地址 &amp;amp;i 处往后若干个字节的内容为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&amp;amp;i&lt;/th&gt;
&lt;th&gt;&amp;amp;i + 1&lt;/th&gt;
&lt;th&gt;&amp;amp;i + 2&lt;/th&gt;
&lt;th&gt;&amp;amp;i + 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;72 $\rightarrow$ &amp;lsquo;r&amp;rsquo;&lt;/td&gt;
&lt;td&gt;6c $\rightarrow$ &amp;lsquo;l&amp;rsquo;&lt;/td&gt;
&lt;td&gt;64 $\rightarrow$ &amp;rsquo;d&#39;&lt;/td&gt;
&lt;td&gt;00 $\rightarrow$ &amp;lsquo;\0&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;遇到结束符即停止输出，因此第二处打印结果为 rld。&lt;/p&gt;
&lt;p&gt;如果 RISC-V 是大端机器，为了使第二处输出结果不变，i 的值应该修改为 0x726c6400。第一处的 57616 不需要修改，因为只要存和取都遵循大端方式，数据的值就不会改变。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: In the following code, what is going to be printed after &lt;code&gt;&#39;y=&#39;&lt;/code&gt;?  (note: the answer is not a specific value.)  Why does this happen?&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;	printf(&amp;quot;x=%d y=%d&amp;quot;, 3);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;y=&lt;/code&gt; 后的内容是进入 printf() 函数后 &lt;code&gt;a2&lt;/code&gt; 寄存器中的值。由于这里的 printf() 函数少了一个参数，&lt;code&gt;a2&lt;/code&gt; 寄存器中的值是 UB，输出结果会是一个无法预料的随机数。&lt;/p&gt;
&lt;h2 id=&#34;backtrace-moderate&#34;&gt;Backtrace (moderate)&lt;/h2&gt;
&lt;p&gt;要实现的 Backtrace 功能和 GDB 中的 backtrace 基本相同：根据栈帧内容回溯函数调用的过程。&lt;/p&gt;
&lt;p&gt;首先需要获取当前函数的栈帧。sp 寄存器指向栈顶，但栈帧的大小是不确定的，我们需要的是栈底指针 fp (即 s0 寄存器)。可以通过内联汇编的方式来读取 fp 寄存器的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static inline uint64
r_fp()
{
  uint64 x;
  asm volatile(&amp;quot;mv %0, s0&amp;quot; : (=r) (x));
  return x;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于现在处在内核态，当前的栈帧存储在上一个用户进程的内核栈上。内核栈大小为一个页面，可以通过 &lt;code&gt;PGROUNDDOWN(fp)&lt;/code&gt; 和 &lt;code&gt;PGROUNDUP(fp)&lt;/code&gt; 来分别获得内核栈的栈顶地址和栈底地址。我们的函数回溯追踪只在内核栈范围内，因为更远的回溯会到用户栈上。&lt;/p&gt;
&lt;p&gt;根据 RISC-V 的栈帧格式，fp 指针实际上指向的是上一个栈帧的底部 (课程中 TA 的说法有误)。在 RV64 中，fp-8 的位置存储了当前函数的返回地址，这个地址理应在当前函数的 caller 函数范围内，打印这个地址就相当于追踪到了上一个函数。fp-16 的位置存储了上一个栈帧的 fp 的内容。将这个值赋给 fp 即可实现顺着栈帧向上爬的功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于 printf() 的输出不能得到正确的结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔者起初使用 printf() 的 &lt;code&gt;%x&lt;/code&gt; 来输出返回地址，但得到的结果出入很大。xv6 中的 printf() 不是调用的 C 库函数，而是自己实现的。阅读 printf() 的源码可以看到，&lt;code&gt;%x&lt;/code&gt; 输出十六进制数只能输出 int 范围内的。要打印一个地址应该使用 &lt;code&gt;%p&lt;/code&gt; 模式来输出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;alarm-hard&#34;&gt;Alarm (hard)&lt;/h2&gt;
&lt;p&gt;我们需要实现两个系统调用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int sigalarm(int ticks, void (*handler)());
int sigreturn(void);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sigalarm()&lt;/code&gt; 负责在当前进程中打开一个定时器，每过 ticks 个周期就执行一次 handler 函数。为了实现这个功能，我们需要在 proc 结构体中添加一些字段：nticks 负责存储当前的周期，handler 负责存储回调函数的地址 (用户虚拟地址)，curticks 负责记录自上一次调用 handler 之后，已经过了多少个周期。在 sys_sigalarm() 函数中，我们应当更新这些字段。&lt;/p&gt;
&lt;p&gt;此处的周期指的不是 CPU 的时钟周期，而是指时钟中断的周期。因此在 usertrap() 函数中，每次判断到 &lt;code&gt;which_dev == 2 &lt;/code&gt;，即时钟中断到来，则 &lt;code&gt;curticks++&lt;/code&gt;，若 curticks 达到了 nticks，则下一次返回用户态应转移到回调函数。sepc 寄存器决定了返回用户态时的地址，因此只要将 handler 赋给 p-&amp;gt;trapframe-&amp;gt;epc 即可。&lt;/p&gt;
&lt;p&gt;回调函数的最后一定会使用 &lt;code&gt;sigreturn()&lt;/code&gt; 系统调用，该系统调用负责回到原本用户程序的中断处继续执行。触发了回调函数的这次中断走过的路程应该是这样的：&lt;/p&gt;
&lt;p&gt;​		用户程序 $\overset{时钟中断}{\rightarrow}$ 内核 $\rightarrow$ 回调函数 $\overset{系统调用}{\rightarrow}$ 内核 $\rightarrow$ 用户程序&lt;/p&gt;
&lt;p&gt;在触发时钟中断时，用户程序的上下文会被保存在 p-&amp;gt;trapframe 中，但从回调函数再进入内核的时候，trapframe 里的上下文会被覆盖。要想对用户程序完全透明地执行这个过程，我们要在执行回调函数之前将原始上下文保存起来。因此我们需要在 proc 结构体中再定义一些变量用来保存原始上下文。笔者使用的一种简单的方法是定义一个 trapframe 结构体 u_trapframe，在进入回调函数之前将 p-&amp;gt;trapframe 里的内容写到 u_trapframe 里。&lt;/p&gt;
&lt;p&gt;此外 test2 中还测试了一种问题：我们在进入回调函数的时候，应该关闭 sigalarm() 设置的定时器。否则如果回调函数执行时间过长，在执行回调函数的过程中某一次时钟中断又触发定时器调用回调函数，就会陷入死递归。因此我们在 proc 结构体中还需要一个变量来记录当前是否是从回调函数中陷入内核态的。这个状态应该在前一次准备进入回调函数时置 1，在 sigreturn() 中清零。当该变量置 1 时，时钟中断不对计时器进行检查。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MIT-6.S081 Lab 01: Xv6 and Unix utilities</title>
      <link>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/notes/coursenotes/mit-operating-system/labs/lab01/</guid>
      <description>&lt;h2 id=&#34;progress&#34;&gt;Progress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; boot xv6 (easy)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; sleep (easy)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; pingpong (easy)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; primes (medium)/(hard)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; find (medium)&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; xargs (medium)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;boot-xv6-easy&#34;&gt;Boot xv6 (easy)&lt;/h2&gt;
&lt;p&gt;刚刚克隆完项目后文件夹里没有东西，这是正常的。切换到 util 分支之后即可看到内容。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;make grade&lt;/code&gt; 命令进行尝试时发现报错：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/env: python: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;笔者根据 stakoverflow 上的
&lt;a href=&#34;https://stackoverflow.com/questions/3655306/ubuntu-usr-bin-env-python-no-such-file-or-directory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个回答&lt;/a&gt;进行了修复：首先检查了一下 python3 是否安装，发现已经安装。出现上述报错的原因是系统内只有 python3 这个程序。因此只要创建一个名为 python 的指向 python3 的软链接即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /usr/bin/python3 /usr/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想要使用 gdb 调试 xv6 的话，可以先在一个窗口工作目录下执行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make CPUS=1 qemu-gdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后新开一个窗口，在工作目录下执行 &lt;code&gt;riscv64-linux-gnu-gdb&lt;/code&gt; 或 &lt;code&gt;gdb-multiarch&lt;/code&gt;，后者会自行判断架构。初次运行可能会遇到 .gdbinit 相关的问题。此时需要创建文件 &lt;code&gt;~/.gdbinit&lt;/code&gt;，并在其中写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;add-auto-load-safe-path ~/xv6-labs-2020/.gdbinit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sleep-easy&#34;&gt;sleep (easy)&lt;/h2&gt;
&lt;p&gt;C 语言编程练习，只需要使用 &lt;code&gt;sleep()&lt;/code&gt; 系统调用即可。不过需要注意 sleep 的参数规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 sleep 没有参数，应当给出错误提示。&lt;/li&gt;
&lt;li&gt;sleep 可以有多个参数，应该将多个参数相加的值传给 &lt;code&gt;sleep()&lt;/code&gt; 系统调用。&lt;/li&gt;
&lt;li&gt;sleep 的任何一个参数中有非数字字符时，应当给出错误提示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pingpong-easy&#34;&gt;pingpong (easy)&lt;/h2&gt;
&lt;p&gt;笔者最初只是用了一个管道，在父进程中 &lt;code&gt;write(p[1], &amp;quot;a&amp;quot;, 1)&lt;/code&gt; 后又 &lt;code&gt;read(p[0], buf, sizeof(buf))&lt;/code&gt;，但这样相当于父进程从管道里读到了自己的输出，没有完成和子进程的互动。&lt;/p&gt;
&lt;p&gt;因此需要使用两个管道，第一个管道用于父进程输出，子进程读入，第二个管道用于子进程输出，父进程读入。&lt;/p&gt;
&lt;h2 id=&#34;primes-moderatehard&#34;&gt;primes (moderate)/(hard)&lt;/h2&gt;
&lt;p&gt;笔者的初代实现如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以第一层为例，父进程创建一个管道之后 fork 出一个子进程，然后将 $2,3,\cdots,35$ 喂给管道的输出端。子进程从管道的输入端接收这些数。子进程收到的第一个数一定是质数，它可以用这个数将剩下的数中这个质数的倍数筛除。之后子进程自己变成一个“父进程”，将收到的数中除了最小质数和被筛除的数的其他数传给自己的子进程。该过程一直持续，直到没有数为止。&lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;while (tot &amp;gt; 0)
{
 pipe(p);

 int pid = fork();
 if (pid &amp;lt; 0) exit_error();
 else if (pid == 0)
 {
     close(p[1]);
     int cur, curp; tot = -1;
     while (read(p[0], &amp;amp;cur, sizeof(cur)) &amp;gt; 0)
     {
         if (tot == -1)
         {
             printf(&amp;quot;prime %d\n&amp;quot;, cur);
             tot ++; curp = cur;
         }
         else
         {
             if (cur % curp != 0) a[tot ++] = cur;
         }
     }
     close(p[0]);
 }
 else
 {
     close(p[0]);
     for (int i = 0; i &amp;lt; tot; i ++)
         write(p[1], a + i, sizeof(int));
     close(p[1]);
     int status; wait(&amp;amp;status);
     if (status != 0) exit_error();
     exit(0);
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样做有一个关键的问题：每一层进程都是完全接收了上一层的数，做完筛法i，再把所有的数传给下一层进程，没有使筛法充分并行起来。&lt;/p&gt;
&lt;p&gt;真正并发/并行的做法是：每个进程有一个管道和父亲通信，另开一个管道和自己的子进程通信。每从自己的父进程接收到一个数就立刻传给自己的子进程。这样的话，比如在第一层进程中 5 通过了 2 的筛查，被传入了第二层，然后第一层进程在筛查 6，7，8，9&amp;hellip; 的时候，第二层进程已经在用 3 筛查 5 了，这样真正做到了并行。将递归与这个过程结合起来写代码会非常舒服，否则需要维护一大堆管道的编号，使编码变复杂。&lt;/p&gt;
&lt;p&gt;需要注意的一点是管道的使用。父进程在给子进程传递完数据后，一定要先关闭管道的输出端再调用 &lt;code&gt;wait()&lt;/code&gt; ，否则子进程的 &lt;code&gt;read()&lt;/code&gt; 在管道输出没有被全部关闭的情况下是不会退出的。&lt;/p&gt;
&lt;h2 id=&#34;find-moderate&#34;&gt;find (moderate)&lt;/h2&gt;
&lt;p&gt;参考 &lt;code&gt;ls&lt;/code&gt; 程序的实现可以对 &lt;code&gt;find&lt;/code&gt; 的实现起到很大的帮助。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; 的实现需要对 xv6 的文件系统有一个粗浅的了解。以下知识是对该任务的实现有帮助的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当我们拿到一个文件时，可以用 &lt;code&gt;fstat()&lt;/code&gt; 系统调用来获取它的信息。&lt;code&gt;fstat()&lt;/code&gt; 系统调用将文件信息写到作为参数的 stat 结构体中，stat 结构体的 type 参数刻画了这是一个文件，文件夹还是设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在通俗的观念中，文件夹是一个“容器”，里面放了很多的文件。但事实上文件夹本身也是一个文件。按照 xv6 的 &lt;code&gt;/kernel/fs.h&lt;/code&gt; 中所说，&amp;ldquo;Directory is a file containing a sequence of dirent structures.&amp;rdquo; dirent 结构体的定义如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define DIRSIZ 14

struct dirent
{
    int inum;
    char name[DIRSIZ];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;inum 是该文件占据的 inode 的个数，我们不必访问那些 inum 为 0 的文件。name 是文件名，在 xv6 中，我们默认文件名不超过 14 个字节。因此在 open 了一个文件夹文件后，我们只要不断用 &lt;code&gt;read(fd, &amp;amp;de, sizeof(dirent))&lt;/code&gt; 命令来读取信息，就可以获得文件夹内所有文件的文件名。将文件名和之前的路径拼接起来，就可以访问文件夹内部的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以用递归来实现文件夹内部文件的访问，但不要对 &lt;code&gt;.&lt;/code&gt; 和 &lt;code&gt;..&lt;/code&gt; 递归，否则会造成死递归。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者最初实现完发现文件系统后面的若干的文件都显示 &lt;code&gt;find: cannot open ...&lt;/code&gt;，经过筛查发现这是因为没有多余的文件描述符可以使用了。在 xv6 中，资源比较有限，&lt;strong&gt;我们应该养成打开一个文件，读取完相关信息就关闭它的好习惯&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;xargs-moderate&#34;&gt;xargs (moderate)&lt;/h2&gt;
&lt;p&gt;有一些命令不支持从管道读取输入，而 &lt;code&gt;xargs&lt;/code&gt; 命令可以帮助这些命令从管道读取信息。注意：管道的创建和输出输入的重定向是由 shell 来完成的，我们的 xargs 程序无需关心输入的来源，只需要从标准输入 (文件描述符 1) 读取信息即可。&lt;/p&gt;
&lt;p&gt;为新命令准备参数的环节是较好的 C 语言指针练习。笔者新建了一个 &lt;code&gt;char *child_args[MAXARG]&lt;/code&gt; 数组来为子进程传递参数。xargs 后紧跟的那几个参数是确定的，再后面的参数需要读入，目前还不能确定长度，所以应该在读取完之后用 &lt;code&gt;malloc()&lt;/code&gt; 来申请内存空间，并在子进程执行完成后用 &lt;code&gt;free()&lt;/code&gt; 释放空间防止内存泄漏。为了能够准确识别到 &lt;code&gt;\n&lt;/code&gt; 以执行多条指令，笔者采取了一个字符一个字符地从标准输入读取信息的方式。读取到的字符暂存在局部数组 buf 中，一旦遇到 &#39; &#39; 或 &amp;lsquo;\n&amp;rsquo; 就根据 buf 的长度申请内存，将 buf 复制到参数数组里。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
