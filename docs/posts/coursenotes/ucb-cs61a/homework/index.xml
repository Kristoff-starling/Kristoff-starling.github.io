<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homework | Academic</title>
    <link>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/</link>
      <atom:link href="https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/index.xml" rel="self" type="application/rss+xml" />
    <description>Homework</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Homework</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/</link>
    </image>
    
    <item>
      <title>UCB-CS61A Homework 01: Control</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw01/</guid>
      <description>&lt;p&gt;值得一提的是下面两道题&lt;/p&gt;
&lt;h2 id=&#34;q5-if-function-refactor&#34;&gt;Q5: If Function Refactor&lt;/h2&gt;
&lt;p&gt;函数调用会先将所有的参数的值算出来再调用，因此会发生 ZeroDivisionError。&lt;/p&gt;
&lt;p&gt;题目要求 &lt;code&gt;invert_short()&lt;/code&gt; 和 &lt;code&gt;change_short()&lt;/code&gt; 使用同一套 &lt;code&gt;limited()&lt;/code&gt; 的接口，且不能添加额外的判断语句。因此最好的实现方法就是修改 &lt;code&gt;limited()&lt;/code&gt; 的语义，参数 z 不再是除法的结果而是分子，除 0 的判断放到 &lt;code&gt;limited()&lt;/code&gt; 里面做。&lt;/p&gt;
&lt;h2 id=&#34;q7-quine&#34;&gt;Q7: Quine&lt;/h2&gt;
&lt;p&gt;下面提供一种 Python 的 Quine 代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_=&#39;_=%r;print (_%%_)&#39;;print (_%_)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;写入到 &lt;code&gt;hw01.py&lt;/code&gt; 中要注意对 &lt;code&gt;&#39;&lt;/code&gt;  进行转义，以及最后需要额外添加一个换行符。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UCB-CS61A Homework 02: Higher-Order Functions</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw02/</guid>
      <description>&lt;p&gt;值得一提的是附加的思考题，对理解 lambda 表达式和函数的本质很有帮助：&lt;/p&gt;
&lt;h2 id=&#34;q3-church-numerals&#34;&gt;Q3: Church Numerals&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def zero(f):
    return lambda x: x

def successor(n):
    return lambda f: lambda x: f(n(f)(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;successor()&lt;/code&gt; 和 &lt;code&gt;zero()&lt;/code&gt; 的基础上我们可以用函数定义出所有的自然数：&lt;code&gt;zero&lt;/code&gt;, &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;two&lt;/code&gt;&amp;hellip; 这些东西本质上是函数，它们首先接受一个参数 f，f 可以是一个任意的函数。接收完 f 之后 &lt;code&gt;zero(f)&lt;/code&gt; &lt;code&gt;one(f)&lt;/code&gt; &amp;hellip; 这些东西还是函数，它们可以接收一个“自变量&amp;quot; x 并返回结果 (可以理解为 &lt;code&gt;_(_)&lt;/code&gt; 前面填函数名，后面填自变量)。&lt;/p&gt;
&lt;p&gt;这里举一例说明 &lt;code&gt;successor()&lt;/code&gt; 的作用：考虑 &lt;code&gt;successor(zero)&lt;/code&gt;，传入 f 和 x 后，&lt;code&gt;zero(f)&lt;/code&gt; 就是 &lt;code&gt;lambda x: x&lt;/code&gt; 这个功能上是 identity 的匿名函数，从而 &lt;code&gt;zero(f)(x)&lt;/code&gt; 的结果是 x，因此 one 的返回值是 &lt;code&gt;f(x)&lt;/code&gt;，因此&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def one(f):
    return lambda f: lambda x: f(x)
def two(f):
    return lambda f: lambda x: f(f(x))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;容易用归纳法证明 n(f)(x) 就是 $f(f(&amp;hellip;f(x)))$，或者理解为&lt;strong&gt;对着 x 这个东西将操作 f 做 n 次后的结果&lt;/strong&gt;，后一种理解更为好用。&lt;/p&gt;
&lt;p&gt;接下来考虑 &lt;code&gt;church_to_int(n)&lt;/code&gt;，n 这个东西是一个嵌套了很多层的函数，我们需要知道它嵌套了多少层，直接去解构显然是不行的。最好的办法就是精心设计传给 n 的参数 f 和 x。我们发现：如果令 f 为函数“将一个数+1&amp;quot;，令 x 为 0，那么 &lt;code&gt;n(f)(x)&lt;/code&gt; 就是&amp;quot;对着 0 将 +1 操作做 n 次后的结果&amp;quot;，这正好是我们需要的答案。因此&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def church_to_int(n):
    return n(increment)(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再然后是加法。一种比较朴素的写法是先解析出 m 和 n 的具体数值，利用数值相加，再循环调用 successor 获得函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add_church(m, n):
    s = church_to_int(m) + church_to_int(n)
    ans = zero
    for _ in range(s): ans = successor(ans)
    return ans
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但这种做法违背了这道题完全摆脱自然数体系的美感，我们可以从更抽象的角度看待这个问题：&lt;code&gt;m(f)&lt;/code&gt; 和 &lt;code&gt;n(f)&lt;/code&gt; 分别表示 “做 m 次 f” 和 “做 n 次 f”，因此 &lt;code&gt;m(f)n(f)(x)&lt;/code&gt; 就是先对 x 做 n 次 f 再做 m 次 f，也就是做了 $m+n$ 次 f。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add_church(m, n):
    return m(f)n(f)(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;乘法：考虑到 &lt;code&gt;m(f)&lt;/code&gt; 是 “做 m 次 f&amp;quot;，那么 &lt;code&gt;n(m(f))&lt;/code&gt; 就是“把做m次f这件事情做n次“，也就是做了 $m\times n$ 次 f。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def mul_church(m, n):
    return n(m(f))(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;乘方更具有挑战性，我们直接解读 &lt;code&gt;n(m)(f)(x)&lt;/code&gt; 的意思： 首先 &lt;code&gt;n(m)&lt;/code&gt; 相当于把 m 重复了 n 次，它的结构类似于 &lt;code&gt;m(m(m(...m(_))))&lt;/code&gt;，也就是每一个 m 返回的函数作为下一层 m 的参数。&lt;code&gt;n(m)(f)&lt;/code&gt; 相当于把函数 f 填到了之前的下划线中，因此展开后，第一个 m 的函数参数是一个 f，第二个 m 的函数参数就是 m 个 f，第三个 m 的函数参数就是 $m^2$ 个 f，依次类推，全部展开就是 $m^n$ 个 f。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def pow_church(m, n):
    return n(m)(f)(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;乘法和乘方写法的细微差别是很值得玩味的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UCB-CS61A Homework 03: Recursion, Tree Recursion</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw03/</guid>
      <description>&lt;p&gt;值得一提的是下面几道题：&lt;/p&gt;
&lt;h2 id=&#34;q1-num-eights&#34;&gt;Q1: Num Eights&lt;/h2&gt;
&lt;p&gt;一个值得注意的 python 优先级问题：笔者刚开始写了一行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;return num_eights(pos // 10) + 1 if pos % 10 == 8 else 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但这样前面的一整个 &lt;code&gt;num_eights(pos // 10) + 1&lt;/code&gt; 都会成为 if 条件成立的结果。正确的写法应当加上括号：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;return num_eights(pos // 10) + (1 if pos % 10 == 8 else 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;q4-count-coins&#34;&gt;Q4: Count Coins&lt;/h2&gt;
&lt;p&gt;如何不重不漏地计数是本题的难点。我们去重的方法是：对于每一种组合方案只计算将钱币升序排列的那一种。因此我们递归时不仅要记录剩余的 change，还要记录当前已经考虑到哪种面值的钱币。假设函数记为 &lt;code&gt;count(change, coin)&lt;/code&gt;，转移我们要考虑 &lt;code&gt;count(change - coin, coin)&lt;/code&gt; 和 &lt;code&gt;count(change, descending_coin(coin))&lt;/code&gt; 两种类型。&lt;/p&gt;
&lt;h2 id=&#34;q6-anonymous-factorial&#34;&gt;Q6: Anonymous Factorial&lt;/h2&gt;
&lt;p&gt;这是一道相当具有挑战性的题目，要求在不使用函数名的情况下完成递归。根据 &lt;code&gt;make_anonymous_factorial()(5)&lt;/code&gt; 的形式可以看出 &lt;code&gt;make_anonymous_factorial()&lt;/code&gt; 是一个返回值为函数的高阶函数。&lt;/p&gt;
&lt;p&gt;我们的核心思想是：**既然用于计算阶乘的函数是匿名函数无法直接通过函数名调用，那么我们就将该函数本身作为函数的一个参数一路传下去。**按照这个思想我们可以写出如下的一个 lambda 表达式：&lt;code&gt;lambda fact, n: 1 if n == 0 else n * fact(fact, n-1)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们要把这个函数本身作为参数 fact 传进去，因此我们外面还得再套一层壳。外面的壳使用一下 function currying 就可以再接受一个参数 n。最终的结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;return (lambda f: lambda n: f(f, n))(lambda fact, n: 1 if n == 0 else n * fact(fact, n-1))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>UCB-CS61A Homework 04: Data Abstraction, Trees</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw04/</guid>
      <description>&lt;p&gt;本章没有特别值得一提的题目，主要就是两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和树相关的操作使用递归可以让代码变得简洁。&lt;/li&gt;
&lt;li&gt;注意 data abstraction，不要越层使用 API。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>UCB-CS61A Homework 05: Iterators and Generators</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/posts/coursenotes/ucb-cs61a/homework/hw05/</guid>
      <description>&lt;p&gt;没有值的特别注意的题目。递归地使用 generator function 是一个难点，但只要掌握了普通就可以进行类比。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
