<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Academic</title>
    <link>/posts/coursenotes/ucb-cs61a/projects/</link>
      <atom:link href="/posts/coursenotes/ucb-cs61a/projects/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Projects</title>
      <link>/posts/coursenotes/ucb-cs61a/projects/</link>
    </image>
    
    <item>
      <title>UCB-CS61A Project 01: Hog</title>
      <link>/posts/coursenotes/ucb-cs61a/projects/hog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/coursenotes/ucb-cs61a/projects/hog/</guid>
      <description>&lt;h2 id=&#34;phase-1-simulator&#34;&gt;Phase 1: Simulator&lt;/h2&gt;
&lt;h3 id=&#34;problem-1&#34;&gt;Problem 1&lt;/h3&gt;
&lt;p&gt;模拟扔骰子计算得分。唯一需要注意的是即使中间摇出了 1 也要将传入的摇骰子次数做完。因为摇骰子的 index 是一个全局变量，这次的不摇完会影响下一次的结果。&lt;/p&gt;
&lt;h3 id=&#34;problem-2&#34;&gt;Problem 2&lt;/h3&gt;
&lt;p&gt;模拟 &lt;code&gt;picky_piggy&lt;/code&gt;，本题代码中不允许使用 string 和 list，因此要使用分离数位的方法获得结果 (或者用大 if)。&lt;/p&gt;
&lt;h3 id=&#34;problem-3&#34;&gt;Problem 3&lt;/h3&gt;
&lt;p&gt;完成 take_turn()，调用 problem 1, 2 中写的两个函数即可。&lt;/p&gt;
&lt;h3 id=&#34;problem-4&#34;&gt;Problem 4&lt;/h3&gt;
&lt;p&gt;模拟 &lt;code&gt;hog_pile&lt;/code&gt;，判断两人得分是否相同即可。&lt;/p&gt;
&lt;h3 id=&#34;problem-5&#34;&gt;Problem 5&lt;/h3&gt;
&lt;p&gt;模拟两个人完整的游戏流程。每轮先调用对应的 strategy 获得摇骰子的次数，然后调用 take_turn() 获得分数，再调用 hog_pile() 获得附加得分，最后切换玩家。&lt;/p&gt;
&lt;h2 id=&#34;phase-2-commentary&#34;&gt;Phase 2: Commentary&lt;/h2&gt;
&lt;h3 id=&#34;commentary-examples&#34;&gt;Commentary Examples&lt;/h3&gt;
&lt;p&gt;say 函数是一类返回值为函数的高阶函数。调用 say 函数会打印出一些信息，并返回一个 say 函数用于下一次调用。最简单的 say 函数是每次逻辑不变的函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def say(score0, score1):
    print(score0, score1)
    return say
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;稍复杂一些的 say 函数每次返回的函数行为可以不同，比如下面的例子在两人分数领先情况发生变化时会打印信息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def annouce_leader_change(last_leader=None):
    def say(score0, score1):
        if score0 &amp;gt; score1:
            leader = 0
        elif: score1 &amp;gt; score0:
            leader = 1
       	else:
            leader = None
        if leader != None and leader != last_leader:
            print(&#39;Player&#39;, leader, &#39;take the lead by&#39;, abs(score0 - score1))
        return annouce_leader_change(leader)
   	return say
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;announce_leader_change()&lt;/code&gt; 返回的 &lt;code&gt;say()&lt;/code&gt; 函数被定义在 &lt;code&gt;announce_leader_change()&lt;/code&gt;函数体内，变量 last_leader 会影响 &lt;code&gt;say()&lt;/code&gt; 的逻辑。&lt;/p&gt;
&lt;p&gt;下面展示比较有意思的 &lt;code&gt;both()&lt;/code&gt; 函数，它会依次执行两个 say 函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def both(f, g):
    def say(score0, score1):
        return both(f(score0, score1), g(score0, score1))
   	return say
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;problem-6&#34;&gt;Problem 6&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;play()&lt;/code&gt; 的最后每次调用 say 函数，并令 say 等于新的 say 函数即可。&lt;/p&gt;
&lt;h3 id=&#34;problem-7&#34;&gt;Problem 7&lt;/h3&gt;
&lt;p&gt;自己书写一个稍复杂的 say 函数 &lt;code&gt;announce_highest()&lt;/code&gt;。该问题中需要注意的是：如果没有声明 non local，我们不能在子函数中直接修改父函数中的变量，我们可以选择通过参数传递的方式把新的 last_score 和 running_high 传给父函数。&lt;/p&gt;
&lt;h2 id=&#34;phase-3-strategy&#34;&gt;Phase 3: Strategy&lt;/h2&gt;
&lt;h3 id=&#34;problem-8&#34;&gt;Problem 8&lt;/h3&gt;
&lt;p&gt;计算若干次运行摇骰子函数的结果的平均值。除了编写高阶函数外，该 problem 的一个知识点在于：我们可以用 &lt;code&gt;*arg&lt;/code&gt; 来将某个函数接收的所有参数灌给另一个要执行的函数。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def printed(f):
    def print_and_return(*args):
        result = f(*args)
        print(&#39;Result:&#39;, result)
        return result
    return print_and_return
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;随着调用 &lt;code&gt;printed()&lt;/code&gt; 时的函数 f 的不同，我们后续执行 &lt;code&gt;print_and_return()&lt;/code&gt; 时可以使用各种数量的参数。&lt;/p&gt;
&lt;h3 id=&#34;problem-9&#34;&gt;Problem 9&lt;/h3&gt;
&lt;p&gt;通过平均值选取当前最优的摇骰子次数。将摇骰子的函数 &lt;code&gt;roll_dice()&lt;/code&gt; 喂给之前编写的 &lt;code&gt;make_averaged()&lt;/code&gt; 即可。此外，为了通过 ok 的测试，循环必须按照从 1 到 10 的顺序写。&lt;/p&gt;
&lt;h3 id=&#34;problem-10&#34;&gt;Problem 10&lt;/h3&gt;
&lt;p&gt;调用 problem 2 中编写的 &lt;code&gt;picky_piggy()&lt;/code&gt; 计算摇 0 的收益并和 cutoff 比较即可。&lt;/p&gt;
&lt;h3 id=&#34;problem-11&#34;&gt;Problem 11&lt;/h3&gt;
&lt;p&gt;和 problem 10 几乎没有差别，额外判断一下会不会触发 hog_pile 规则即可。&lt;/p&gt;
&lt;h3 id=&#34;problem-12&#34;&gt;Problem 12&lt;/h3&gt;
&lt;p&gt;可以参考的一些策略有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;picky_piggy_strategy()&lt;/code&gt; 和 &lt;code&gt;hog_pile_strategy()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果能够确保胜利，则应该选择小的摇骰子次数规避风险。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>UCB-CS61A Project 02: Cat</title>
      <link>/posts/coursenotes/ucb-cs61a/projects/cat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/coursenotes/ucb-cs61a/projects/cat/</guid>
      <description>&lt;h2 id=&#34;phase-1-typing&#34;&gt;Phase 1: Typing&lt;/h2&gt;
&lt;h3 id=&#34;problem-1&#34;&gt;Problem 1&lt;/h3&gt;
&lt;p&gt;寻找第 k 个满足条件的字符串，注意这里的 k 是 0-base 的。&lt;/p&gt;
&lt;h3 id=&#34;problem-2&#34;&gt;Problem 2&lt;/h3&gt;
&lt;p&gt;充分利用 &lt;code&gt;utils.py&lt;/code&gt; 中提供的 &lt;code&gt;split()&lt;/code&gt; &lt;code&gt;remove_punctuation()&lt;/code&gt; 和 &lt;code&gt;lower()&lt;/code&gt; 函数可以大幅简化代码的难度。&lt;/p&gt;
&lt;h3 id=&#34;problem-3&#34;&gt;Problem 3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注意单独处理几种列表长度为 0 的边界情况。&lt;/li&gt;
&lt;li&gt;返回值 0/100 会被当作一个整数，想要返回一个浮点数应当写 0.0/100.0。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;problem-4&#34;&gt;Problem 4&lt;/h3&gt;
&lt;p&gt;简单数学计算。&lt;/p&gt;
&lt;h2 id=&#34;phase-2-autocorrect&#34;&gt;Phase 2: Autocorrect&lt;/h2&gt;
&lt;h3 id=&#34;problem-5&#34;&gt;Problem 5&lt;/h3&gt;
&lt;p&gt;本题比较漂亮的写法是充分运用 &lt;code&gt;min()&lt;/code&gt; 函数的 key：直接把 &lt;code&gt;diff_function()&lt;/code&gt; 的内容用 lambda 表达式套起来喂给 key，可以省去书写 for 循环。&lt;/p&gt;
&lt;h3 id=&#34;problem-6&#34;&gt;Problem 6&lt;/h3&gt;
&lt;p&gt;本题的难点在于不能使用循环只能用递归，此外还要保证答案超过 limit 的时候运行效率尽可能与长度无关。笔者实现的方法是将答案作为参数随着递归传下去，这样一旦答案超出 limit 递归就提前返回。&lt;/p&gt;
&lt;h3 id=&#34;problem-7&#34;&gt;Problem 7&lt;/h3&gt;
&lt;p&gt;这题颇具难度，其思路类似于动态规划。一个比较简单的做法是：我们每次考虑如何让两个单词的第一个字母匹配上。如果已经一样就跳过看下一个字母，否则就从加字母 (肯定会加匹配的字母)，删字母 (删字母后并不保证第一个字母能匹配上)，换字母中选一种操作。&lt;/p&gt;
&lt;h2 id=&#34;phase-3-multiplayer&#34;&gt;Phase 3: Multiplayer&lt;/h2&gt;
&lt;h3 id=&#34;problem-8&#34;&gt;Problem 8&lt;/h3&gt;
&lt;p&gt;本题可以关注字典的初始化方法：在 &lt;code&gt;{}&lt;/code&gt; 中用 &lt;code&gt;&#39;key&#39;: value&lt;/code&gt; 的方式包括若干 key-value pairs。&lt;/p&gt;
&lt;h3 id=&#34;problem-9&#34;&gt;Problem 9&lt;/h3&gt;
&lt;p&gt;本题没有太大的难度，运用 list comprehension 可以将代码写得简短漂亮。&lt;/p&gt;
&lt;h3 id=&#34;problem-10&#34;&gt;Problem 10&lt;/h3&gt;
&lt;p&gt;该题本身没有太大难度，但应当注意实现时最好使用框架代码提供的几个和 match 互动的 API，将 match 当作一个 abstract data structure 而不是直接去定位嵌套列表中的元素。所谓的 abstract data structure 就是只关注 API 提供的数据结构对外的交互功能而忽略数据结构内部的实现方法。&lt;/p&gt;
&lt;h2 id=&#34;utils&#34;&gt;Utils&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;utils.py&lt;/code&gt; 提供了一些辅助函数。其中值得注意的 API 用法有：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def remove_punctuation(s):
    punctuation_remover = str.maketrans(&#39;&#39;, &#39;&#39;, string.punctuation)
    return s.strip().translate(punctuation_remover)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;str.maketrans()&lt;/code&gt; 为 &lt;code&gt;translate()&lt;/code&gt; 提供字符转换的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;maketrans()&lt;/code&gt; 接收一个参数，那么这个参数必须是一个字典。字典的映射就是转换的源和目标。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;maketrans()&lt;/code&gt; 接收两个参数，那么这两个参数必须是长度相同的字符串，对应的字符构成转换规则。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;maketrans()&lt;/code&gt; 接收三个参数，那么第三个参数的字符串的内容会被映射到 None，前两个同 (2)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里主要利用了三个参数的规则将所有的标点符号映射到了 None。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strip(c=&#39; &#39;)&lt;/code&gt; 方法用于去除字符串首尾的字符 c，如果没有传入参数则默认去除空格。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
