<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MiniLabs | Academic</title>
    <link>https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/</link>
      <atom:link href="https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/index.xml" rel="self" type="application/rss+xml" />
    <description>MiniLabs</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>MiniLabs</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/</link>
    </image>
    
    <item>
      <title>MiniLab 01: Process Tree</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/minilab01/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/minilab01/</guid>
      <description>&lt;p&gt;该实验主要目的是实现一个精简版的 Linux pstree 命令行工具，以较为优美的方式打印当前系统中的进程树。&lt;/p&gt;
&lt;h2 id=&#34;parse-args&#34;&gt;Parse args&lt;/h2&gt;
&lt;p&gt;首先对输入的选项列表进行分析。笔者使用了 C 库函数 getopt_long()，它不仅可以帮助我们快速解析选项，还可以同时识别一个选项的长短版本 (使用 C 库提供的 option 结构体可以定义每种选项的长短版本以及是否需要参数等)，识别多个选吸纳更合并给出的格式 etc.。&lt;/p&gt;
&lt;p&gt;定义好表格后，仅需一句话即可完成选项解析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;const struct option table[] = {
    {&amp;quot;numeric-sort&amp;quot;, no_argument, NULL, &#39;n&#39;},
    {&amp;quot;show-pids&amp;quot;   , no_argument, NULL, &#39;p&#39;},
    {&amp;quot;version&amp;quot;     , no_argument, NULL, &#39;V&#39;},
    {0             , 0          , NULL,  0 },
};

getopt_long(argc, argv, &amp;quot;-npV&amp;quot;, table, NULL)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于版本信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux 的 pstree 工具会将版本信息输出到标准错误流，为了模拟这一特性，我们可以使用 fprintf 语句将版本信息输出到 stderr 文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;fetch-process-information&#34;&gt;Fetch Process Information&lt;/h2&gt;
&lt;p&gt;Linux 提供 procfs，我们可以用读写文件的 API 来获取操作系统中的进程状态。procfs 的根目录是 &lt;code&gt;/proc&lt;/code&gt;，该目录中所有是数字的文件夹都存储了一个进程相关的信息，文件夹的数字名就是进程编号。配合使用 C 库函数 opendir() 和 readdir() 就可以遍历 &lt;code&gt;/proc&lt;/code&gt; 下的所有内容并筛选出那些是数字的文件夹名。&lt;/p&gt;
&lt;p&gt;每个进程文件夹下的 &lt;code&gt;/proc/[pid]/stat&lt;/code&gt; 文件中存储了我们打印进程树所需要的状态信息，包括但不限于进程的名字，进程的状态，进程号，父进程号等。我们可以利用这些信息把进程树构建出来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于进程名的格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据 &lt;code&gt;man proc&lt;/code&gt; 的提示，所有的进程名都是用一对小括号包裹着的。笔者起初使用了 &lt;code&gt;scanf(&amp;quot;%[^)]&amp;quot;)&lt;/code&gt; 的方法，读到右括号停止，但发现进程中有一些进程的进程名本身就带括号。因此只能一个字节一个字节读并同步维护一个括号的栈来确定什么时候停止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以在 &lt;code&gt;/proc/sys/kernel/pid_max&lt;/code&gt; 文件中查看进程号的最大值，在 64 位系统中，这个最大值为 $2^{22}$。为了代码编写的方便和效率，笔者开了一个这么大的数组 proc_pos[] 用于维护每个进程号对应到进程信息结构体数组 proc[] 的哪个位置。 proc 结构体中维护了一个当前进程的所有孩子的链表，孩子数量，进程名等信息。由于系统中真正在运行的进程个数远小于 $2^{22}$，这个做法可以省很多内存。&lt;/p&gt;
&lt;p&gt;事实上，Linux 的 pstree 工具还会将一个进程下的所有线程打印出来。我们可以在 &lt;code&gt;/proc/[pid]/task&lt;/code&gt; 下看到所有的线程文件夹，&lt;code&gt;/proc/[pid]/task/[tid]/stat&lt;/code&gt; 中也有各个线程的状态，不过本实验不要求打印线程。&lt;/p&gt;
&lt;h2 id=&#34;print-tree&#34;&gt;Print tree&lt;/h2&gt;
&lt;p&gt;打印进程树可以用对进程树的一次 dfs 来实现 —— 根节点是 1 号进程 systemd。这里需要注意的是遍历顺序的问题：在默认情况下，pstree 各个子树会按照进程名的字典序排序，如果有 &lt;code&gt;-n&lt;/code&gt; 选项，则要按照进程号从小到大排序。在笔者的实现中，单向链表不方便进行高级的排序，但我们可以直接交换两个链表内部的内容，使用朴素的冒泡排序来完成工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;更优美的显示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打印树结构的最简单的方法是使用缩进：我们只需要记录当前递归到第几层，并打印相应个数的 TAB 即可。为了实现像 Linux pstree 工具那样精美的树结构，我们需要以下观察：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个进程的第一个子进程不换行。仔细思考以下，我们会发现这个规则等价于我们只会在那些叶子进程处换行。&lt;/li&gt;
&lt;li&gt;每个进程名之前有一个树的节点符号，这个节点符号遵循的规则如下：
&lt;ul&gt;
&lt;li&gt;如果某进程有且仅有一个子进程，则节点符号为 &lt;code&gt;-&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;如果某进程有大于一个子进程，则第一个孩子的节点符号是 &lt;code&gt;+&lt;/code&gt;，最后一个孩子的节点符号是 &lt;code&gt;`&lt;/code&gt; ，中间孩子的节点符号是 &lt;code&gt;|&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当我们在打印内层进程内容时，外层进程树会有 &lt;code&gt;|&lt;/code&gt; 延伸下来，我们可以用一个栈记录所有需要打印 &lt;code&gt;|&lt;/code&gt; 的位置。但需要注意的是：每个进程的最后一个子进程如果还有子进程，子进程的子进程是不会被子进程的父进程的 &lt;code&gt;|&lt;/code&gt; 包裹住的，具体操作上，每个进程的最后一个子进程负责将父进程从栈中弹出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>MiniLab 02: Coroutine Library</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/minilab02/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/minilab02/</guid>
      <description>&lt;p&gt;本实验的主要目标是实现协程库 (lib coroutines)。很大程度上协程和线程非常相似，一个主要的区别是：线程可以响应中断，然后通过内核的调度器进行切换，而协程如果不主动 yield 则不会切换。&lt;/p&gt;
&lt;h2 id=&#34;coroutine-struct&#34;&gt;Coroutine Struct&lt;/h2&gt;
&lt;p&gt;协程之间共享内存，但各自有独立的运行时栈。笔者定义的协程结构体大致如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct co {
    const char *name;
    void (*func)(void *);
    void *arg;

    enum co_status status;
    struct co      *waiter;
    jmp_buf        context;
    uint8_t        stack[STACK_SIZE];
}coroutine[CO_SIZE];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt; 字段主要用于 debug。&lt;code&gt;func&lt;/code&gt; 和 &lt;code&gt;arg&lt;/code&gt; 是目标函数的地址和调用时的参数。&lt;code&gt;waiter&lt;/code&gt; 存储了指向调用 co_wait() 等待当前协程的“父协程”的指针，当本协程结束时，应该唤醒 (可能存在的) 睡眠的父协程。&lt;code&gt;context&lt;/code&gt; 存储了切换时的寄存器上下文，在本实验中，我们使用 setjmp() 和 longjmp() 来完成跳转。&lt;/p&gt;
&lt;h2 id=&#34;co_new&#34;&gt;co_new()&lt;/h2&gt;
&lt;p&gt;co_new() 要做的事情很简单：将所有的协程相关的信息保存到一个结构体变量中即可。我们主要需要思考的是如何开始执行一个新的协程。对于那些调用 co_yield() 中断的协程，我们只需要一个 longjmp() 就可以跳回去，但新的协程的运行时环境的创建要我们自己来操心：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们需要自己完成栈切换并让 PC 指向目标函数的地址。&lt;/li&gt;
&lt;li&gt;协程对应的函数结束后，我们要指定好返回地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者最初的实现用內联汇编包办了上面的所有事情：将协程栈地址赋给 %esp/%rsp，用 &lt;code&gt;jmp&lt;/code&gt; 指令直接跳转，并在栈上提前存储了一个指向 co_exit() 函数地址的“返回地址”来引导协程结束的去向。但后发现其实用 C 语言做一个 wrapper 完成函数跳转更方便：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void wrapper(void *sp, void *entry, uintptr_t arg) {
    // stack switching, in assembly
    ((void(*)(uintptr_t))entry)(arg);
    // coroutine goes here after entry(arg)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C 编译器会将我们的跳转语句翻译成 call，帮我们填写好返回地址 (不需要额外创建一个 co_exit() 函数了)。我们在內联汇编中需要做的就是将 wrapper() 的栈环境复刻一份到协程的栈上 ( x86_64 甚至只需要改一下 %rsp，因为参数是放在寄存器里的；x86 需要把栈上的参数也搬一份)。&lt;/p&gt;
&lt;p&gt;协程结束后，我们应该将其状态设置成 ZOMBIE (等待父协程回收)，并跳转到调度函数。&lt;/p&gt;
&lt;h3 id=&#34;stack-alignment&#34;&gt;Stack Alignment&lt;/h3&gt;
&lt;p&gt;笔者曾经在 x86_64 中遇到过神秘的段错误，使用 GDB 定位后发现错误语句出现在 printf() 库函数形如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;movaps %xmm0,0x50(%rsp)
movaps %xmm1,0x60(%rsp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;的 SSE 指令。x86_64 对栈有 16 字节的对齐要求 (每个单元是 8 个字节)，这是因为 x86_64 中的一部分寄存器是 16 字节的。出现该错误的根本原因是笔者没有按照 System V ABI 的要求设置好 %rsp：System V ABI (x86-64) 对堆栈对齐的要求是：call 指令执行之前要按 16B 对齐，call 指令执行之后就不按照 16B 对齐了。这其中的原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;call 指令执行之前，堆栈按 16B 对齐；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;call 指令的语义是：将下一条指令的地址 push 到栈上，然后根据操作数让 PC 跳转到对应的地址执行新的函数。我们向堆栈 push 了一个 8B 的东西 (返回地址)，所以刚执行完 call 指令时堆栈是不对齐的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刚进入一个新函数时，(一般情况下) 编译器生成的头两条指令会是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34;&gt;push %rbp
mov %rsp, %rbp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时我们又向栈上 push 了一个 8B 的东西 (旧 %rbp 值)，因此在正式开始执行函数体时，堆栈又是对齐的了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这套流程下，返回地址总是被保存在一个 16B 不对齐的地址上。笔者最初的实现用 jmp 指令直接跳转，且 %rsp 设置成了 16B 对齐，在 16B 对齐的位置手动放了一个返回地址，这样进入新函数 &lt;code&gt;push %rbp&lt;/code&gt; 之后，堆栈就不对齐了，从而导致错误。&lt;/p&gt;
&lt;h2 id=&#34;co_yield&#34;&gt;co_yield()&lt;/h2&gt;
&lt;p&gt;co_yield() 的代码非常简单：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void co_yield() {
  int val = setjmp(current-&amp;gt;context);
  if (val == 0) sched();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;利用 setjmp() 和 longjmp()，我们可以轻松地完成寄存器现场的封存和恢复。setjmp() 在保存寄存器现场时的返回值是 0，longjmp() 跳转回来时可以指定返回值为非零数，这样保存完现场会跳转到调度函数，跳转回来时就可以直接返回协程继续执行。&lt;/p&gt;
&lt;h2 id=&#34;co_wait&#34;&gt;co_wait()&lt;/h2&gt;
&lt;p&gt;co_wait() 要分两种情况：一是子协程已经是僵尸协程，这时候直接释放子协程的资源；二是子协程还不是僵尸协程，这时候要将当前协程睡眠 (状态设置成 WAITING)，子协程结束时会负责唤醒它 (将状态改成 RUNNING)。&lt;/p&gt;
&lt;h2 id=&#34;co_init&#34;&gt;co_init()&lt;/h2&gt;
&lt;p&gt;我们需要对协程库做一些必要的初始化：比如 main() 函数本身也是一个协程，我们要将 main() 函数作为一个 RUNNING 的协程存储好。初始化函数应当在 main() 函数开始执行之前执行，因此我们需要&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;__attribute__((constructor)) void co_init() {
    // code
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;来修饰 co_init()。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MiniLab 03: Syscall Profiler</title>
      <link>https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/minilab03/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/posts/coursenotes/nju-operating-system/minilabs/minilab03/</guid>
      <description>&lt;p&gt;该实验的主要目标是利用 strace 系统调用实现一个性能监测器，实时输出当前进程运行耗时排名前 5 的系统调用。&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;该实验的大体思路为：我们需要 fork 出一个子进程，让子进程用 strace 运行目标程序，并把 strace 的结果通过管道输送给父进程。本实验只允许使用 execve() 函数，不允许使用带有 p 的库函数，这意味着我们必须手动解析环境变量，将所有的路径一一加在 strace 的前面并调用 execve()，直到找到 strace 的确切位置为止 (如果成功执行，函数不会返回)。父进程负责不断从管道中读取 strace 的输出，解析出系统调用名和消耗的时间并添加到数据结构中，每隔一段时间输出一次。&lt;/p&gt;
&lt;p&gt;以下主要记录实验中遇到的一些有趣的细节。&lt;/p&gt;
&lt;h2 id=&#34;dup-vs-dup2&#34;&gt;dup() vs dup2()&lt;/h2&gt;
&lt;p&gt;创建管道以后，我们会有将子进程的标准输出和父进程的标准输入连接到管道的写口/读口的需求。我们可能会写出这样的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;close(0);        // close stdin
dup(pipefd[0]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dup() 总是会挑选当前最小的未使用文件描述符，因此关闭了 stdin 后，dup() 会将 0 号文件描述符复制为管道写口的文件描述符。但这其实是一个 bad practice：在多线程的程序中，如果 close() 和 dup() 之间被插入了其他执行流，我们不能保证 dup() 执行时最小的未使用文件描述符仍然是 0。因此我们应该使用函数 dup2()：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;dup2(pipefd[0], 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dup2() 系统调用的声明为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int dup2(int oldfd, int newfd);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;它和 dup() 的含义基本相同，不同之处在于我们可以指定将 oldfd 复制到 newfd 上而不是“最小的未使用文件描述符”。如果 newfd 对应的文件处于打开状态，dup2() 会将其先关闭再使用该描述符。dup2() 的好处在于关闭文件和使用 newfd 的过程是&lt;strong&gt;原子&lt;/strong&gt;的 (手册保证了这一点)。&lt;/p&gt;
&lt;h2 id=&#34;time-information-matching&#34;&gt;Time Information Matching&lt;/h2&gt;
&lt;p&gt;笔者尝试使用了正则表达式来匹配 strace 输出信息中和运行时间相关的有效内容。&lt;code&gt;regex.h&lt;/code&gt; 库中提供了和正则表达式相关的库函数。一些比较有用的函数罗列如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int regcomp(regex_t *preg, const char *regex, int cflags);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该函数负责将一个正则表达式编译成一个 regex_t 类型的东西。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t pmatch[], int eflags);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;regexec() 负责匹配。&lt;code&gt;preg&lt;/code&gt; 是编译好的正则表达式，&lt;code&gt;string&lt;/code&gt; 是匹配的串。&lt;code&gt;nmatch&lt;/code&gt; 是匹配次数。pmatch[] 数组会存储 nmatch 个匹配结果，其中每个结果是一个  regmatch_t 类型的东西：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct {
    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;两个变量存储了匹配结果首尾相对于 &lt;code&gt;string&lt;/code&gt; 首地址的偏移量。&lt;/p&gt;
&lt;h2 id=&#34;noise-filtering&#34;&gt;Noise Filtering&lt;/h2&gt;
&lt;p&gt;我们希望过滤掉目标程序的噪音输出以保证父进程可以获得纯净的 strace 信息。我们有两个方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重定向目标程序的标准错误 (因为 strace 默认输出到标准错误)，但笔者并没有在 strace 的手册中查看到只重定向目标程序的选项。&lt;/li&gt;
&lt;li&gt;重定向 strace 的输出：我们可以利用 strace 的 &lt;code&gt;-o&lt;/code&gt; 选项来将 strace 的信息输出到一个指定的文件。事实上，我们创建的管道也是一个文件：虽然 pipe() 创建的管道是匿名的，但我们仍然可以通过 procfs 找到它：对于进程号 pid 下文件描述符 id，&lt;code&gt;/proc/pid/fd/id&lt;/code&gt; 就是该文件的文件名。因此我们可以利用 &lt;code&gt;-o&lt;/code&gt; 直接将 strace 的输出直接定向到管道 (甚至省掉了 dup2() 的过程)。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
