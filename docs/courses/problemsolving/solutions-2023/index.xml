<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[2023级]OJ习题讲解 | Yuyao Wang&#39;s Homepage</title>
    <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/</link>
      <atom:link href="https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/index.xml" rel="self" type="application/rss+xml" />
    <description>[2023级]OJ习题讲解</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 18 Apr 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>[2023级]OJ习题讲解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/</link>
    </image>
    
    <item>
      <title>问题求解II-Final 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-final/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-final/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 卓尔不群&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定 $n\times m$ 的地图，每个格子上有一个数。问从 $(1, 1)$ 走到 $(n, m)$ 路径上数的和最大是多少，只能向右或向下走。&lt;/li&gt;
&lt;li&gt;$n, m\leq 1000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;一道比较基础的动态规划问题。令 $dp(i, j)$ 表示从 $(1, 1)$ 走到 $(i, j)$ 的最大值，状态转移是容易的：&lt;/p&gt;
&lt;p&gt;$$
dp(i, j) = \max \left\{dp(i-1, j), dp(i, j-1)\right\} + a_{ij}
$$&lt;/p&gt;
&lt;p&gt;$dp(n, m)$ 即为答案。总时间复杂度为 $O(nm)$。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 双重麻烦&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定 $n\times m$ 的地图，每个格子上有一个数。小 A 从 $(1, 1)$ 走到 $(n, m)$，只能向右或向下走；小 B 从 $(1, m)$ 走到 $(n, 1)$，只能向左或向下走。求两人路径上数的和的最大值(两人重复经过的格子计算答案时只算一次)。&lt;/li&gt;
&lt;li&gt;$n, m\leq 1000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;观察两人的行进方向容易发现：&lt;strong&gt;小 A 和 小 B 路径的重合区域必然在同一行或同一列中&lt;/strong&gt;。以下分析只叙述重合区域在同一行的情况，同一列的情况同理。&lt;/p&gt;
&lt;p&gt;令 $LU/LD/RU/RD_{ij}$ 分别表示单人从左上/左下/右上/右下角出发到 $(i, j)$ 的最大值，这部分可以通过和上一题几乎一样的动态规划方法求出。在此基础上，记重合部分为 $(x, y_1)$ 到 $(x, y_2)$，该行的前缀和数组为 $sum$，则两人路径权值和为&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
S &amp;amp;= LU_{x, y_1} + LD_{x, y_1} + RU_{x, y_2} + RD_{x, y_2} + sum_{y_2} - sum_{y_1 - 1}\\
&amp;amp;= (LU_{x, y_1} + LD_{x, y_1} - sum_{y_1 - 1}) + (RU_{x, y_2} + RD_{x, y_2} + sum_{y_2}) \\
&amp;amp;\overset{def}{=} f(x, y_1) + g(x, y_2)
\end{align}
$$&lt;/p&gt;
&lt;p&gt;严谨来说上面的表达式不太正确——如果重合区域恰好从 $(x, y_1)$ 开始，那么我们要保证小 A 和小 B 不同时从 $(x, y_1 - 1)$ 走过来，即 $f(x, y_1)$ 实际上应该为&lt;/p&gt;
&lt;p&gt;$$
f(x, y_1) = \max\left\{ LU_{x - 1, y_1 - 1} + LD_{x, y_1}, LU_{x, y_1} + LD_{x + 1, y_1}\right\}
$$&lt;/p&gt;
&lt;p&gt;$g(x, y_2)$ 也是同理。但上式的重点是展示出重合路径的左右端点是互不影响的，即右端点的变化不会影响最优左端点的决策。因此我们可以对于每一行枚举重合路径的右端点，并同步更新前缀的左端点 $f$ 最大值用来更新答案。总时间复杂度为 $O(nm)$。&lt;/p&gt;
&lt;p&gt;本题细节较多，对代码能力的要求较高。除了上文提到的 $f$ 和 $g$ 函数的细节处理，还要对重合路径只有一个点的情况进行特殊判断。很多同学在考场上写出的正确代码将近 200 行，这里强烈建议大家看一看我们提供的标准程序，从中学习一些复用代码片段、减少无谓调试的技巧。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem C: 智能数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现一个容器并接受 $n$ 次操作，每次操作要么向容器中加入一个数，要么输出容器中第 $I$ 小的数。变量 $I$ 从 1 开始计数，每次询问操作之后值加一。&lt;/li&gt;
&lt;li&gt;$n\leq 2\times 10^5$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;本题的思路和之前作业中的“动态中位数”十分类似。我们可以维护一个小根堆和一个大根堆，大根堆维护前 $I$ 小的数，小根堆维护剩下的数。加入新数字时根据大小关系加入到正确的堆中，并调整两个堆的规模使得大根堆中始终只有 $I$ 个元素；查询时输出大根堆中的最大值即可。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem D: 积木塔&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定一个 $n$ 个数的数组 $a_1, \cdots, a_n$，每次操作可以挑选一个区间 $[l, r]$，并将该区间内所有的数减一，反复操作直到所有的数变为 0。问最优操作下最短区间的长度最长是多少。&lt;/li&gt;
&lt;li&gt;$n\leq 5\times 10^6$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;本题考场版本的数据比较简单，所有数的大小均不超过100，因此一些复杂度和数的大小相关的做法甚至常数较小的 $O(n\log n)$ 做法也顺利通过了。这里我们介绍一个标准的基于贪心的 $O(n)$ 解法。&lt;/p&gt;
&lt;p&gt;假设当前我们要选择一个区间 $[1, R]$，考虑如何选择 $R$ 对答案最有利。我们让一个变量 $r$ 从第一列开始向右扫描，注意到以下两个性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 $a_r\leq a_{r+1}$，那么 $r$ 应当继续向后移。这是因为当前列上的 $a_r$ 个区间每个都能和右边“接上头”，那么在这里断开就没有任何收益。&lt;/li&gt;
&lt;li&gt;如果 $a_r&amp;gt;a_{r+1}$，那么 $r$ 就应当到此为止不再右移。这是因为下一列的数比较小，当前列的 $a_r$ 个区间必然有一些要在这里结束，那么为了让最短的区间尽可能长，我们应当挑选当前最长的区间结束。我们考虑的 $[1, R]$ 这个区间显然是当前最长的 (第一列的数用完后，有一些其他区间会从 $2, 3, 4\cdots$ 开始)，所以应该就此结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据这两条观察，最优的 $R$ 应当满足：&lt;/p&gt;
&lt;p&gt;$$
(a_R &amp;gt; a_{R+1}) \wedge(\forall 1\leq r&amp;lt;R. a_r\leq a_{r+1})
$$&lt;/p&gt;
&lt;p&gt;根据这个条件，我们其实已经有了一个正确的做法：我们可以不断地从当前第一个非0的列 $L$ 开始，根据条件寻找最优的 $R$ 并操作 $[L, R]$ 这个区间，重复该过程直到所有数全部为0。接下来的问题是如何快速地寻找 $R$ 以及如何应对过大的数字。&lt;/p&gt;
&lt;p&gt;关于如何寻找 $R$，我们可以发现其实并不需要每次从 $L$ 开始从头开始检查，这是因为 $R$ 的选择存在单调性：每次 $[L, R]$ 区间内的数同时减一，所以之前满足 $a_r\leq a_{r+1}$ 的那些位置被操作之后仍然满足该性质。因此我们每次只需从上一次的 $R$ 开始往右检查即可。&lt;/p&gt;
&lt;p&gt;关于如何应对过大的数，我们会发现当数很大的时候，每次操作一个区间效率其实很低，因为这会导致很多次选出相同的区间。会导致选择区间发生变化的事件只有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前的 $a_L$ 被减到了0。此时我们需要寻找新的第一个非零列。&lt;/li&gt;
&lt;li&gt;当前的 $R$ 不再满足 $a_R&amp;gt;a_{R+1}$，换句话说 $a_R=a_{R+1}$。此时我们要向后寻找新的 $R$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，每次我们固定好当前的 $L$ 和 $R$ 后，可以判断一下这两个事件哪个先发生，并将发生之前的多个重复区间统一处理，这样做复杂度就能保证是线性的。这是因为每一批操作结束后，要么有一个数变为0，要么有两个数变得一样，可想而知 $O(n)$ 次操作后所有数都会变为 0。&lt;/p&gt;
&lt;p&gt;本题的标程代码非常简短，但除了上文已经提及的实现细节外，然有一些技巧需要大家仔细思考，总体而言是一道思维难度较大，程序也不是非常好写的题目。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW11 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-11/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-11/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 字符串哈希&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定 $n$ 个字符串构成的字典和 $m$ 个询问串，问多少个询问串在字典里出现过。&lt;/li&gt;
&lt;li&gt;$n, m \leq 10000$，所有字符串长度不超过 16。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;见
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/solutions-2022/3-10&#34;&gt;这份题解&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 两数之和&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定 $n$ 个数和一个目标和 $target$，问是否存在两个数和为 $target$。&lt;/li&gt;
&lt;li&gt;$n\leq 10^5$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对于数组中的每个数 $x$，我们只需判断数组中是否存在 $target-x$ 即可。这一步可以通过哈希实现，使用 C++ STL 容器可以写得更加轻巧。一个需要注意的细节是对重复数的判断，若数组中存在唯一的 $x$ 满足 $2x=target$，根据题目要求 $x$ 是不能被重复使用算作答案的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW13 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-13/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-13/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 高楼抛鸡蛋&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个 $n$ 层的高楼。存在一个未知的分界楼层 $X$，在 $1&amp;hellip;X$ 层扔鸡蛋落地不会碎；在 $X+1$ 层以及更高的楼层扔鸡蛋落地会碎。问用 $k$ 个鸡蛋最少扔几次可以确定 $X$。&lt;/li&gt;
&lt;li&gt;$n\leq 10^4, k\leq 100$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;见
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/solutions-2022/2-5-a&#34;&gt;这份题解&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 背包问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个容积为 $v$ 的背包和 $n$ 个物品，第 $i$ 个物品的体积是 $v_i$，价值是 $w_i$。求用背包最多能装下多少价值的物品。&lt;/li&gt;
&lt;li&gt;$n\leq 500, v\leq 10^9, \sum w_i\leq 10^6$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;见
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/solutions-2022/2-5-c&#34;&gt;这份题解&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem C: Cache调度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有两块 Cache 和 $n$ 个程序，每个程序有一个类别 (共有 $k$ 种类别)，在同一块 Cache 上连续执行相同种类的程序第二次只需 $hot_i$ 的时间，否则需要 $cold_i$ 的时间。问串行执行所有程序所需的最小时间。&lt;/li&gt;
&lt;li&gt;$n, k\leq 5000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;见
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/solutions-2022/2-6-b&#34;&gt;这份题解&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW14 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-14/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-14/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 最长公共子序列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定两个字符串 $s, t$，求两者的最长公共子序列的长度。&lt;/li&gt;
&lt;li&gt;$1\leq |s|\leq 10^6, 1\leq |t|\leq 10^3$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;见
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/solutions-2022/2-5-b&#34;&gt;这份题解&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 写作文&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定长度为 $n$ 的数列，现可以挑选 $k$ 个数加 $x$，剩下的数减 $x$。问在最优操作下，数列的最长连续子序列和是多少。&lt;/li&gt;
&lt;li&gt;$n\leq 10^5$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;考虑对于每一个右端点寻找最优的(即能使连续子序列之和最大的)左端点。尝试写出区间 $(l, r]$ 最优修改后的区间和表达式：&lt;/p&gt;
&lt;p&gt;$$
sum(l, r) =
\begin{cases}
s_r - s_l + x(r - l)= (s_r+xr) - (s_l + xl)&amp;amp;, r - l \leq k \\
s_r - s_l + xk - x(r - l - k) = (s_r - xr) - (s_l + xl) + 2xk &amp;amp;, r - l &amp;gt; k
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;其中 $s_i$ 表示前 $i$ 个数原始的和。容易发现，左端点在两个式子中相关的项只有 $s_l + xl$，即左端点的选择和右端点的位置无关。因此对于每一个右端点 $r$，我们只需在 $[1, r-k]$ 和 $(r-k, r]$ 两个区间中分别挑选 $s_l + xl$ 值最小的端点作为备选左端点更新答案即可。&lt;/p&gt;
&lt;p&gt;$[1, r-k]$ 这个区间处理起来相对容易，可以在枚举右端点的同时维护前缀最小值；$(r-k, r]$ 这个区间处理起来稍微麻烦一些。使用堆等数据结构是一种方法，不过利用单调性可以将这个问题做的更好。这个单调性指的是：从左向右枚举右端点时，如果 $l_1&amp;lt;l_2$ 且 $s_{l_1}+xl_1&amp;gt;s_{l_2}+xl_2$，那么 $l_2$ 一定优于 $l_1$。这是因为 $l_2$ 不仅好而且位置更右，可以服务更多的后续右端点。凭借这个性质，我们可以用一个双端队列维护 $(r-k, r]$ 区间内值递增的一系列位置，每次从队头取最优左端点，在队尾添加新的端点并更新队列。总时间复杂度为 $O(n)$。&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;单调队列/单调栈&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文末提到的根据单调性使用双端队列维护窗口区间内有意义的一系列值的方法叫做单调队列优化。感兴趣的同学可以阅读 &lt;a href=&#34;https://oi-wiki.org/ds/monotonous-queue/&#34;&gt;这篇文章&lt;/a&gt; 和 &lt;a href=&#34;https://oi-wiki.org/dp/opt/monotonous-queue-stack/&#34;&gt;这篇文章&lt;/a&gt; 了解更多。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW10 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-10/</link>
      <pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-10/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 堆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定框架代码，补全堆实现的 &lt;code&gt;heapify&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;make_heap&lt;/code&gt; 等函数。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;模板题。在代码实现上的技巧是：使用数组 (1-base) 存储完全二叉树时，下标 $x$ 元素的父亲节点下标是 $\lfloor \frac{x}{2}\rfloor$，左孩子下标是 $2x$，右孩子下标是 $2x+1$。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 动态中位数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定 $n$ 个数，对于每个 $1\leq i\leq n$ 输出前 $i$ 个数的中位数。&lt;/li&gt;
&lt;li&gt;$n\leq 10^5$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;考虑使用一个大根堆和一个小根堆来维护动态中位数。我们将 $n$ 个数依次插入，每次插入时根据它和小根堆最大数的大小关系决定一下它应该去哪个队。插入完毕后再调整一下两个堆的大小，保证数的个数差始终在1以内。如此维护，每次只需要根据小根堆最大数和大根堆最小数计算中位数即可。总时间复杂度 $O(n\log n)$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW09 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-9/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-9/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 恢复多叉树&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定一棵 $n$ 个节点的有根多叉树的前序和后序遍历，求其每一层的最右侧节点的编号。&lt;/li&gt;
&lt;li&gt;$n\leq 50000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;众所周知，对于二叉树来说知道前序遍历和后序遍历并不能确定唯一的树形态，这是因为有的只有一个子树的节点我们无法确定子树挂在左边还是右边。但事实上，如果只要求确定每一个节点所有孩子的顺序，前后序遍历是足够的。考虑 $solve(l_1, r_1, l_2, r_2)$ 表示分析出前序遍历 $[l_1, r_1]$ 和后序遍历 $[l_2, r_2]$ 对应的子树形态的算法，$solve(1, n, 1, n)$ 即为所求。我们容易发现前序遍历中的 $l_1$ 位置的元素是树根；相对应地，后序遍历中的 $r_2$ 位置的元素也是树根（同一个元素）。进一步，我们可以得出如下的结构：&lt;/p&gt;
&lt;img src=&#34;https://kristoff-starling.github.io/img/problemsolving/ps-sol-23-2091.png&#34; style=&#34;zoom:100%;&#34; /&gt;
&lt;p&gt;solve 的流程是：我们可以利用前序遍历中每个子树的根到后序遍历中寻找对应的根的位置，从而在后序遍历中确定子树的元素个数，以此类推将所有子树划分好，再递归地对每段子树用 solve 处理。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 新马走日&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给定一个 $n\times m$ 的棋盘和象棋棋子马的初始位置，问经过 $k$ 步到达棋盘上任意点的方案数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$n,m\leq 15, k\leq 10^5$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;见
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/solutions-2022/2-1-c/&#34;&gt;这份题解&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW08 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-8/</link>
      <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-8/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 棋盘&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$R\times C$ 的棋盘上有 $n$ 个棋子，一个格子是好的当且仅当他所在行列的棋子数目恰好为 $k$，求好格子的数目。&lt;/li&gt;
&lt;li&gt;$1\leq n, R, C, k\leq 10^5$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;读入所有棋子的位置后，我们很容易统计出每行、每列也多少个棋子，也很容易对每个 $i=1,\cdots, n$ 统计出有 $i$ 个棋子的行列有多少个。对于一个有 $p$ 个棋子的行，所有有 $k-p$ 个棋子的列都可以与之搭配在交叉点产生一个好位置。因此只需要枚举所有的行，按照数目进行统计即可。&lt;/p&gt;
&lt;p&gt;一个重要的细节是，如果某行某列的交叉点处正好有棋子，那么我们之前所说的将行列棋子数相加的统计方法就会多算一个。因此我们要对每个棋子特判一次。具体地，对于每个棋子，它所在的行列棋子数相加如果是 $k$ 个，那么实际上就是 $k-1$ 个，需要从答案中扣除；如果是 $k+1$ 个，那么实际上就是 $k$ 个，需要加到答案中。&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;调试和测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本题有一些细节容易遗漏处理 (例如对于每个棋子所在行列的特判)，一旦没有考虑到就容易陷入“样例全过，交到 OJ 上 WA，我也一筹莫展”的窘境。将来大家走向工作岗位是要为自己写出的代码负责的。实际生产环境中没有 OJ，软件开发员也不可能完全依赖用户来给自己报 bug (不然公司早就倒闭了)。在软件工程中有一个概念叫作“软件测试”，主要关注的问题就是在没有“标准答案”的方法，如何用测试来自己给自己纠错。&lt;/p&gt;
&lt;p&gt;在做 OJ 题这个层面，最好用的纠错能力就是掌握良好的调试技术和采用正确的调试方法。我们在此强烈推荐大家阅读 &lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/coding/defense/&#34;&gt;调试艺术&lt;/a&gt; 和 &lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/coding/difftest/&#34;&gt;差异化测试&lt;/a&gt; 这两篇文章。对于此题而言，写出一个对却慢的标准程序是非常容易的：你甚至可以 $O(n^3)$ 地枚举每一行，每一列，并暴力数这一行列中的棋子个数。然后你可以生成大量规模在 $100$ 左右的小测试数据进行 differential testing。掌握正确的调试和测试方法可以让你写程序事半功倍。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 发奖金&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本题改编自 &lt;a href=&#34;https://www.luogu.com.cn/problem/P1080&#34;&gt;[NOIP2012]国王游戏&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;本题只需要输出排在最后的人的两个数字之积。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下面证明：按照每个人 $AB$ 两数之积从小到大排序的结果是最优的。&lt;/p&gt;
&lt;p&gt;假设存在另一个非升序的排列更优，那么一定存在一对相邻的人反序。不妨设他们手里的数为 $A_1, B_1$ 和 $A_2, B_2$，他们之前的人的 $A$ 之积为 $P$。现在这两个人的奖金的较大值为&lt;/p&gt;
&lt;p&gt;$$
\max\left(\frac{P}{B_1}, \frac{PA_1}{B_2}\right)
$$&lt;/p&gt;
&lt;p&gt;考虑将这两个人交换顺序，那么交换后两人奖金的较大值为&lt;/p&gt;
&lt;p&gt;$$
\max\left(\frac{P}{B_2}, \frac{PA_2}{B_1}\right)
$$&lt;/p&gt;
&lt;p&gt;因为 $A_1B_1&amp;gt;A_2B_2$，即 $\frac{A_1}{B_2}&amp;gt;\frac{A_2}{B_1}$，所以 $\frac{PA_1}{B_2}&amp;gt;\frac{PA_2}{B_1}$，又这里所有数都大于一，所以显然有 $\frac{PA_1}{B_2}&amp;gt;\frac{P}{B_2}$。因此交换之后这两个人的奖金较大值会变小。又因为这两个人之前和之后的人的奖金不会变化，所以交换之后的答案不会变大。一个非升序的排列可以通过不断交换相邻的非升序员工变成升序，且每次交换都不会变劣，所以升序的排列不会比该排列劣，这与假设矛盾。&lt;/p&gt;
&lt;p&gt;综上，升序排列是一个最优排列，该题的答案即为 $\max_{i=1}^nA_iB_i$。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW01 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-1/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-1/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 排序&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定 $n$ 个整数，输出排序后的结果。&lt;/li&gt;
&lt;li&gt;$n\leq 1000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;关于排序，我们强烈建议大家学会快速排序和归并排序两种做法。关于快速排序，其思想虽然不那么复杂，但要写出一个对于各种输入都足够高效的版本仍十分有挑战性 (尤其当输入中有大量重复数时)，建议大家利用 
&lt;a href=&#34;https://www.luogu.com.cn/problem/P1177&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这道题目&lt;/a&gt; 检测自己的快速排序写法是否合格。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 逆序对&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定一个 $n$ 个数的序列，求逆序对个数。&lt;/li&gt;
&lt;li&gt;$n\leq 2\times 10^5$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;求逆序对有非常经典的基于归并排序的做法。设 $solve(l, r)$ 为 $a_l\cdots a_r$ 中逆序对的个数，计算方法如下：令 $mid=(l+r)/2$，：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归计算 $solve(l, mid)$ 和 $solve(mid+1, r)$。&lt;/li&gt;
&lt;li&gt;考虑 $[l, mid]$ 里的数对 $[mid+1, r]$ 里的数的贡献。在两个子区间都排好序的情况下，我们只需要对左子区间的每个数计算右边有多少个数比它小即可，这可以通过 $O(n)$ 的一边扫描做到。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由主定理可知，该做法的时间复杂度为 $O(n\log n)$。&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;CDQ分治&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CDQ分治是一类特别的分治技巧，它的框架是：在解决 $[l, r]$ 上的问题时，先递归解决 $[l, mid]$ 和 $[mid+1, r]$，再考虑左侧区间对右侧区间的影响。求逆序对背后的二维偏序是CDQ分治最典型的应用之一，如果你感兴趣，可以参考&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/algorithms/cdq&#34;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW02 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-2/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-2/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: Twelvefold Way I&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 $n$ 个完全相同的球放入 $m$ 个不同的篮子，问有多少种不同的放法。&lt;/li&gt;
&lt;li&gt;$1\leq n, m\leq 1000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;经典的组合数学问题。由于盒子可空，考虑对 $n+m$ 个球使用插板法，最后再从每个盒子里扣掉一个球，因此总方案数为 $\binom{n+m-1}{m-1}$。&lt;/p&gt;
&lt;p&gt;因为本题数据范围较小，所以可以利用 $\binom{n}{m}=\binom{n-1}{m-1}+\binom{n-1}{m}$ 的组合数递推公式来计算答案取模后的值。但我们仍然建议大家学习快速计算阶乘逆元的方法，以应对可能出现的更大的数据范围。你可以参考 
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/coding/mulinv/&#34;&gt;这篇文章&lt;/a&gt; 学习求逆元的常见写法。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: Twelvefold Way II&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 $n$ 个各不相同的球放入 $m$ 个完全相同的篮子，且每个篮子里至少有一个球，问有多少种不同的放法。&lt;/li&gt;
&lt;li&gt;$1\leq n, m\leq 500$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;令 $s(n, m)$ 表示将 $n$ 个不同的球放入 $m$ 个相同的篮子的方案数，考虑最后一个球的放法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该球独占一个篮子，则剩下的 $n-1$ 个球放在 $m-1$ 个篮子里，方案数为 $s(n-1, m-1)$。&lt;/li&gt;
&lt;li&gt;该球不独占一个篮子，则先将剩下的 $n-1$ 个球放入 $m$ 个篮子里，再挑选一个篮子放入最后一个球，方案数为 $n\cdot s(n-1, m)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此 $s(n, m)=s(n-1, m-1) + n\cdot s(n-1, m)$。这里的 $s(n, m)$ 称为第二类斯特林数，有兴趣的同学可以上网搜索与之相关的其他性质。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW03 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-3/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-3/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 最大连续子数组和&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定长度为 $n$ 的数组，求和最大的一个连续子数组。&lt;/li&gt;
&lt;li&gt;$n\leq 10^5$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;我们直接给出如下的贪心做法，并尝试说明其正确性：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for (int i = 1; i &amp;lt;= n; i++) {
    sum += a[i]; ans = max(ans, sum);
    if (sum &amp;lt; 0) sum = 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们只要说明每轮循环中，$sum$ 记录的都是以 $a_i$ 结尾的最大和子数组即可。为了说明这点，我们需要想清楚 $sum$ 求的是哪一段的和，即 if 语句丢弃的段有什么性质。&lt;/p&gt;
&lt;p&gt;令 $sum$ 上次被置零和本次被置零丢弃的区间为 $[l, r]$，那么我们可以知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\sum_{k=l}^r a_i &amp;lt; 0$。&lt;/li&gt;
&lt;li&gt;对于任意 $l\leq t&amp;lt;r$，$\sum_{k=l}^t a_i&amp;gt;0$ (因为一直没有被丢弃)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由这两条，我们可以推出：对于任意 $l\leq t\leq r$，都有 $\sum_{k=t}^ra_i&amp;lt;0$，从而这一段无论如何都只会对后面产生负数的贡献，因此完全丢弃它是合理且正确的。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 芯片测试&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有 $n$ 个芯片，其中好芯片个数多于坏芯片个数。每次可以挑选两个芯片进行一轮测试，根据测试结果可以得到一定的芯片状态信息。请找出至少一个好的芯片。&lt;/li&gt;
&lt;li&gt;$n\leq 10^5$，交互题。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;我们采取如下的策略：随机抽取一个芯片，并拿着它和其他所有芯片各做一次测试。考虑如下两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这个芯片是好的，由于初始好芯片数目大于坏芯片数目，所以剩下的芯片中好芯片数目仍不少于坏芯片数目，从而至少有一半的测试实际上是 &lt;code&gt;(好，好)&lt;/code&gt;，从而至少有一半的测试结果是 &lt;code&gt;(好，好)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果这个芯片是坏的，那么剩下芯片中好芯片数目仍然大于坏芯片数目，从而少于一半的测试实际上是 &lt;code&gt;(坏，坏)&lt;/code&gt;，从而少于一半的测试结果是 &lt;code&gt;(好，好)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，一波测试之后我们可以完全确定当前抽取的芯片是好是坏。因为好芯片多于一半，所以多抽几次总能抽到好芯片，可以在时间限制内完成任务。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW04 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-4/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-4/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: Hanoi Tower&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出 $n$ 个盘子的汉诺塔的移动序列。&lt;/li&gt;
&lt;li&gt;$n\leq 15$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;令 $seq(n, a, b, c)$ 表示将 $n$ 个盘子从 $a$ 柱借助 $b$ 柱移到 $c$ 柱的序列，那么&lt;/p&gt;
&lt;p&gt;$$
seq(n, a, b, c)=seq(n-1, a, c, b) + move(n, a, c) + seq(n-1, b, a, c)
$$&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 数列&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求 Fibonacci 数列的第 $n$ 项。&lt;/li&gt;
&lt;li&gt;$n\leq 10^9$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;求 Fibonacci 数列有经典的利用矩阵快速幂加速的手法，可以参考
&lt;a href=&#34;https://kristoff-starling.github.io/posts/recurrences&#34;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW05 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-5/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-5/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 被打乱的邮件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求长度为 $n$ 的序列的错排数。&lt;/li&gt;
&lt;li&gt;$n\leq 5000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;方法一：容斥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;考虑对有多少个数被“确定”地放在了正确的位置上进行容斥，最终方案数为&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
ans &amp;amp;= \sum_{k=0}^n(-1)^k\binom{n}{k}(n-k)! \\
&amp;amp;= n!\sum_{k=0}^n\frac{(-1)^k}{k!}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二：递推&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;令 $f(n)$ 表示长度为 $n$ 的序列的错排数。考虑数字 $1$ 的位置，因为需要错排，所以有 $n-1$ 种放法。不妨设 $1$ 被放在了 第 $k$ 个位置，接下来考虑 $k$ 的位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$k$ 被放在了第一个位置，那么剩下的 $n-2$ 个数构成错排，共有 $f(n-2)$ 种放法。&lt;/li&gt;
&lt;li&gt;$k$ 不被放在第一个位置，那么 $k$ 此时有了一个我们新安排的“禁忌位置”，从而这 $n-1$ 个数构成错排，共有 $f(n-1)$ 种放法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，$f(n)=(n-1)(f(n-1)+f(n-2))$，递推即可，时间复杂度为 $O(n)$。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 检测 GPU&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定三个 $n\times n$ 的矩阵 $A, B, C$，判断 $AB=C$ 是否成立。&lt;/li&gt;
&lt;li&gt;$n\leq 5000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在这样的数据规模下，我们无法接受将 $AB$ 的结果算出后再判断是否正确。这里我们为大家介绍 Freivalds 算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令 $\vec{r}$ 为长度为 $n$ 的随机01向量。&lt;/li&gt;
&lt;li&gt;计算 $C\vec{r}$ 和 $A(B\vec{r})$，比较两个结果是否相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 $AB=C$，那么结果必定相同；下面证明如果 $AB\neq C$，结果相同的概率小于 $\frac{1}{2}$：&lt;/p&gt;
&lt;p&gt;令 $D=(AB-C)$，则 $D$ 是非零矩阵，不妨设 $d_{ij}\neq 0$。令 $D\vec{r}=\vec{p}$，因为 $A(B\vec{r})=C\vec{r}$，所以 $\vec{p}=\vec{0}$，那么关注第 $i$ 行的结果，有&lt;/p&gt;
&lt;p&gt;$$
\sum_{k=0}^nd_{ik}r_k=d_{ij}r_k+\sum_{k\neq j}d_{ik}r_k=0
$$&lt;/p&gt;
&lt;p&gt;令后一项为 $y$，即 $d_{ij}r_k+y=p_i=0$，我们有&lt;/p&gt;
&lt;p&gt;$$
Pr(p_i=0) = Pr(p_i=0|y=0)Pr(y=0)+Pr(p_i=0|y\neq 0)Pr(y\neq 0)
$$&lt;/p&gt;
&lt;p&gt;又&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
Pr(p_i=0|y=0) &amp;amp;= Pr(r_k=0)=\frac{1}{2} \\
Pr(p_i=0|y\neq 0) &amp;amp;= Pr(r_k=1\wedge d_{ij}=-y)\leq Pr(r_k=1)=\frac{1}{2}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;所以&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
Pr(p_i=0) &amp;amp;= Pr(p_i=0|y=0)Pr(y=0)+Pr(p_i=0|y\neq 0)Pr(y\neq 0) \\
&amp;amp;\leq \frac{1}{2}Pr(y=0)+\frac{1}{2}Pr(y\neq 0) \\
&amp;amp;= \frac{1}{2}Pr(y=0) + \frac{1}{2}(1-Pr(y=0)) \\
&amp;amp;= \frac{1}{2}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;从而&lt;/p&gt;
&lt;p&gt;$$
Pr(D\vec{r}=0) = Pr\left(\bigwedge_{k=1}^n p_k=0\right)\leq Pr(p_i=0)\leq \frac{1}{2}
$$&lt;/p&gt;
&lt;p&gt;综上，这是一个符合单边蒙特卡洛的测试，我们只要重复多次就可以将错误的概率降到很低。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW06 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-6/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-6/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 购物&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令第 $i$ 个人买东西为事件 $E_i$，令恰好有 $r$ 个人买了东西为事件 $E$，已知 $P(E_1),\cdots, P(E_n)$，求 $P(E_1|E),\cdots, P(E_n|E)$。&lt;/li&gt;
&lt;li&gt;$1\leq r\leq n\leq 20$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;方法一：枚举&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为本题数据范围足够小，所以我们可以枚举所有人买或不买的情况，计算出 $P(E)$ 和针对每个人的 $P(E_iE)$，从而根据公式 $P(E_i|E)=P(E_iE)/P(E)$ 得到答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二：动态规划&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;考虑如何高效计算 $P(E)$，令 $f(i, j)$ 表示前 $i$ 个人有 $j$ 个购买了东西的概率，那么考虑第 $i$ 个人买不买，有状态转移方程：&lt;/p&gt;
&lt;p&gt;$$
f(i, j) = f(i-1, j)\cdot (1-P(E_i)) + f(i-1, j-1)\cdot P(E_i)
$$&lt;/p&gt;
&lt;p&gt;最后 $f(n, r)$ 即为所求。对于任意一个 $P(E_iE)$，我们只要提前将第 $i$ 个人拎出去，对剩下的 $n-1$ 个人做动态规划，最后 $P(E_i)\cdot f_i(n-1, r-1)$ 即为所求。总时间复杂度 $O(n^3)$。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 取数游戏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个长度为 $2n$ 的数列，保证所有数的和是奇数。两个人轮流取数，每次只能取数列的第一个或最后一个数。问双方都采取最优策略的情况下谁能获得胜利。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;见
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/solutions-2022/2-2-a/&#34;&gt;这份题解&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>问题求解II-HW07 题解</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-7/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving/solutions-2023/2-7/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem A: 数字接龙&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定 $n$ 个数的序列，求将其首尾相接能组成的最大的数。&lt;/li&gt;
&lt;li&gt;$n\leq 50000$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;令 $w(x)=10^{x的位数}$。首先，在最优解中，相邻的两个数 $A,B$ 一定满足 $\overline{AB}\geq \overline{BA}$。又 $\overline{AB}\geq \overline{BA}$ 意味着 $Aw(B)+B\geq Bw(A)+A$，移项化简可得 $\frac{A}{w(A)-1}\geq \frac{B}{w(B)-1}$，所以我们只需要将所有数按照 $\frac{x}{w(x)-1}$ 的值从大到小排序再拼接即可获得最优解 (该属性值相同的若干个连续数无论如何换序不会影响答案)。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Problem B: 优化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定包含 $n$ 个整数的集合 $S$，要求恰好移除 $k$ 个数，使得剩下的数中 $\min_{x,y\in S，x\neq y}x-y$ 最大。&lt;/li&gt;
&lt;li&gt;$1\leq k, n\leq 10^5, n-k\geq 2$。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;见
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving/solutions-2022/3-7/&#34;&gt;这份题解&lt;/a&gt; 的第一题。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
