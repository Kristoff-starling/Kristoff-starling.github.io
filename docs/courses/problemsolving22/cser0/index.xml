<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一个CSer应当掌握的基础技能合集 | Academic</title>
    <link>https://kristoff-starling.github.io/courses/problemsolving22/cser0/</link>
      <atom:link href="https://kristoff-starling.github.io/courses/problemsolving22/cser0/index.xml" rel="self" type="application/rss+xml" />
    <description>一个CSer应当掌握的基础技能合集</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>一个CSer应当掌握的基础技能合集</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/cser0/</link>
    </image>
    
    <item>
      <title>English</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/cser0/english/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/cser0/english/</guid>
      <description>&lt;p&gt;随着科学技术的发展, 在国际学术交流中使用英语已经成为常态: 顶尖的论文无一不使用英文来书写, 在国际上公认的计算机领域经典书籍也是使用英文编著。顶尖的论文没有中文翻译版; 如果需要获取信息, 也应该主动去阅读英文材料, 而不是等翻译版出版。&amp;ldquo;我是中国人, 我只看中文&amp;quot;这类观点已经不符合时代发展的潮流, 要站在时代的最前沿, 阅读英文材料的能力是不可或缺的。&lt;/p&gt;
&lt;p&gt;想要学好计算机，大家一定要趁早“逼迫”自己熟悉英语环境，尤其强化自己的英语阅读能力 (将来快速略读大段的英文手册很可能是你的工作/学习常态)。我们强烈建议你注意以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要依赖教材的中文翻译版本。&lt;/strong&gt; 将来大家学习的《算法导论》等教材是比较容易找到中文翻译版本的，但正如名著的翻译版时常体现不出名著本身的意境，翻译版的教材在很多细节上可能与原版有出入，影响大家的理解，也不利于大家熟悉一些英文术语。我们认为，英文阅读能力合格的标准之一便是阅读学术方面的英文材料和中文材料应该基本不存在速度差异。这个过程刚开始可能会比较痛苦，但随着学期深入大家一定能克服障碍。&lt;del&gt;大家也不必对这个标准感到过于惊慌，因为助教认为自己的英语阅读能力也不合格&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要依赖百度等中文网站解决问题。&lt;/strong&gt; 在刚刚接触计算机以及学习算法的初级阶段，中文的博客 (以CSDN为主) 可以帮助大家解决一部分问题。但随着大家水平的提高，很多复杂的问题 (尤其是与系统配置，环境配置相关的问题) 在中文环境下很难找到契合的回答。这时推荐大家使用对应的英文关键字在 google/bing/stackoverflow 上搜索回答。&lt;/li&gt;
&lt;li&gt;(如果我想到了会再添加)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;英语的学习和强化方法是一个见仁见智的问题。我们的建议是不要期待 &lt;em&gt;大学英语读写/大学英语视听说&lt;/em&gt; 能给你带来质的改变。提升语言能力的核心还是多读多听多说多写。引用陈道蓄老师的话: “坚持一年, 你就会发现有不同; 坚持两年, 你就会发现大有不同。”&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding Environment</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/cser0/ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/cser0/ide/</guid>
      <description>&lt;p&gt;正所谓“工欲善其事，必先利其器”，想要拥有良好的代码书写体验就应当配置好一套舒适的代码编写环境。打开 Windows 的“记事本”编写代码可不是什么好的选择——一方面记事本无法提供代码高亮、自动补全、智能缩进等功能，盯着白纸黑字写代码颇为心累；另一方面即使你写完了代码，记事本也没有集成好配套的编译、调试工具帮助你确定代码的正确性。&lt;/p&gt;
&lt;p&gt;很多优秀的程序员都会选择 IDE (Integrated Development Environment，中文翻译为集成开发环境）来书写代码。所谓集成开发环境，就是将写代码所需要的一系列工具都集成在了一个软件里，从书写代码所需的编辑器，到编译运行代码所需的编译器、链接器，到调试代码所需的调试器……IDE里应有尽有，且很多功能都可以“一键运行”，极好地将程序员的精力解放了出来。&lt;/p&gt;
&lt;p&gt;由于本课程主要希望培养大家掌握 C/C++ 这门语言，所以我们着重介绍了几个和 C/C++ 配合体验良好的 IDE，包括 Dev-C++ (极其推荐新手入门使用，入门门槛低)，Visual Studio (工业级的重型IDE，功能强大但身材略显臃肿), Visual Studio Code (宇宙最强编辑器) 等，大家可以参考杜星宇助教撰写的
&lt;a href=&#34;https://kristoff-starling.github.io/docs/C-env.pdf&#34;&gt;这篇文档&lt;/a&gt; 来学习。&lt;/p&gt;
&lt;p&gt;如果你已经是比较有经验的代码书写者，你可能并不需要 IDE。你也许会习惯使用 Vim/Emacs 等老牌编辑器，自己写脚本编译和运行代码，使用 GDB 进行调试……如果你能驾驭这些，我们当然也鼓励你充分地使用这些命令行工具。不过我们还是极力地推荐你尝试一下 VS Code (这不是为微软打广告)，其丰富的第三方插件库，强大的远程连接功能，自由的代码跳转、补全、纠错使其堪称编辑器界 BUG 级的存在，毕竟写代码怎么舒服怎么来，能拥有一个
&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这样&lt;/a&gt; 炫酷的界面何乐而不为呢？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self Learning</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/cser0/self-learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/cser0/self-learning/</guid>
      <description>&lt;p&gt;高中的时候，每天老师会给你布置一堆试卷，你什么也不用管只需要跟着老师的节奏走；但大学里，你很可能在课下根本找不到老师的踪影，大学课程的作业量通常不大，每天会有大量的空余时间不知道该做什么……因此进入大学后，大家一定要扭转自己的学习模式，做一个 self-motivated 的人。你应当学会为自己规划：应该看一些什么样的书，应当上一些什么样的网课，如果打算出国我是不是应当着手准备英语测试……学会 self-learning，你才能在大学中存活下来。&lt;/p&gt;
&lt;p&gt;上面的话是各个学科通用的，着眼于计算机这个学科，self-learning 有其独特的方法。计算机学科的一大特点在于技术更新极快——你学习的某项技术很可能是去年刚刚产生的，很多工具的使用也不会在教科书中写出。因此不同于学习数学物理时四处寻找好的教材，学习计算机一定要学会利用好强大的&lt;strong&gt;互联网&lt;/strong&gt;。学习工具时，多找一找官方的文档 (Almost all official manuals are written in English, which again demonstrates the significance of proficiency in English.)，遇到疑难杂症时，多看一看有没有类似的问题解答可以参照……当你遇到问题第一反应是自己动手寻求解决方案而不是打开和“大腿”的QQ聊天框求救时，你便已经进步了很多。&lt;/p&gt;
&lt;p&gt;下面的话来自大家未来操作系统课程的老师：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Search the friendly(f**king) web.&lt;/p&gt;
&lt;p&gt;Read the friendly(f**king) manual.&lt;/p&gt;
&lt;p&gt;其中的 F 让它们更具传奇色彩。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Typesetting</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/cser0/typesetting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/cser0/typesetting/</guid>
      <description>&lt;p&gt;从某种角度来说，计算机领域的大牛多少有一点偏执——毕竟写代码的时候漏打一个符号便可能酿成大祸，所以学计算机的人总有点“强迫症”。退一步来说，即使你没有强迫症，写作文的时候歪七扭八、行间距不一、每个字都不一样大，开头时不时地忘记空两格……总不是件好事。&lt;/p&gt;
&lt;p&gt;你也许在书面助教的作业要求中注意到了 &amp;ldquo;Latex&amp;rdquo; 这个东西。Latex 是一个高质量的排版系统，你可以通过编写代码生成文档的方式来精确地控制文档里的每一处细节，比如分隔线的粗细、图片的大小，页边距的宽窄等等，精度可以达到毫米。我们不强制要求大家使用 Latex 书写作业 (因为对于新手来说这可能会耗费很多的时间)，但我们仍然推荐你学习这项工具 (不出意外，你撰写毕业论文的时候是肯定会用到它的)。&lt;/p&gt;
&lt;p&gt;如果你认为 Latex 太过麻烦，不妨尝试一下 Markdown，从原理上来说 Markdown 和 Latex 很不一样，但你可以简单地认为它们都是通过一些特殊的符号来生成具有格式，编排美观的文档 (助教博客中的大部分页面都是用 Markdown 书写的)。Markdown 比 Latex 简明很多，比如你可以通过 &lt;code&gt;#&lt;/code&gt; 来生成各个级别的标题：&lt;/p&gt;
&lt;h2 id=&#34;这是二级标题&#34;&gt;这是二级标题&lt;/h2&gt;
&lt;h3 id=&#34;这是三级标题&#34;&gt;这是三级标题&lt;/h3&gt;
&lt;p&gt;可以通过 &lt;code&gt;*&lt;/code&gt; 来生成列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表1&lt;/li&gt;
&lt;li&gt;列表2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有丰富的数学符号：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;\begin{align}
f(n)=\sum_{d|n}g(d)\Longleftrightarrow g(n)=\sum_{d|n}\mu(d)f\left(\frac{n}{d}\right).
\end{align}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$$
\begin{align}
f(n)=\sum_{d|n}g(d)\Longleftrightarrow g(n)=\sum_{d|n}\mu(d)f\left(\frac{n}{d}\right).
\end{align}
$$&lt;/p&gt;
&lt;p&gt;我们强烈建议你至少掌握一些 Markdown 的基本语法，这可以帮助你将来迅速地写出一份还算美观的文档。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Typing</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/cser0/typing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/cser0/typing/</guid>
      <description>&lt;p&gt;对于零基础的同学来说，键盘可能是十分陌生的。但大家既然选择了CS，计算机之于大家就应当相当于宝剑之于骑士，打字就应当像拿筷子吃饭一样熟练。如果你连&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应当如何通过键盘敲出下划线 _ ？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题都感到无从下手，那你一定要花一些功夫练习打字。&lt;/p&gt;
&lt;p&gt;打字这件事很像投篮。能把球投进篮筐的姿势都是好姿势，同理打得快、准确率高的姿势也都是好姿势。但我们还是建议初学者打好基础，学习正规的十指布局。我们认为一个合格的CSer应当拥有200+cpm (character per minute) 的打字速度。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
