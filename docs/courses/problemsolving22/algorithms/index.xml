<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法&amp;数据结构 | Yuyao Wang&#39;s Homepage</title>
    <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/</link>
      <atom:link href="https://kristoff-starling.github.io/courses/problemsolving22/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <description>算法&amp;数据结构</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 21 Dec 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>算法&amp;数据结构</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/</link>
    </image>
    
    <item>
      <title>字符串哈希</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/string-hash/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/string-hash/</guid>
      <description>&lt;p&gt;字符串哈希的本质是将一个字符串集合映射到一个数的集合，从而将比较两个字符串是否相等转化为比较他们的哈希值是否相等，将复杂度降低到 $O(1)$。&lt;/p&gt;
&lt;p&gt;字符串哈希的经典哈希函数是类似于进制转换的按位权相加，即对于字符串 $s=s_1\cdots s_n$，&lt;/p&gt;
&lt;p&gt;$$
hash(s)=\left(\sum_{i=1}^np^{n-i}s_i\right)\ \text{mod}\ M
$$&lt;/p&gt;
&lt;p&gt;其中 $p$ 和 $M$ 是预先选好的参数。$p$ 被称为种子，通常取大质数，$M$ 的选择有两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个大质数；&lt;/li&gt;
&lt;li&gt;$2^{64}$；该模数的好处是可以直接利用 unsigned long long 类型的自然溢出取模，速度更快写起来也更简洁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在普通的哈希中我们通常用拉链法/线性探查法来解决哈希冲突，但在字符串哈希中，我们通常不处理冲突，而是选择“相信”不会遇到两个不同的字符串有相同哈希值。这份“自信”来源于巨大的值空间：当 $M$ 取得足够大时 (比如 $10^{18}$ 级别)，将远小于值空间数目的字符串映射进去，冲突的概率极小 (如果你对这个问题感兴趣，请参考本文最后绿色框内的补充内容&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;)。&lt;/p&gt;
&lt;h4 id=&#34;滚动哈希&#34;&gt;&lt;strong&gt;滚动哈希&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;计算上述的哈希值是很有技巧的。在很多情形下，我们需要对一个大字符串的多个子串计算哈希值，如果我们求出 $\sum$ 里的每一项再相加，那么每个子串的计算复杂度均为 $O(length)$，这不可接受。&lt;/p&gt;
&lt;p&gt;滚动哈希技术可以在对字符串线性预处理后，$O(1)$ 求出任意子串的哈希值。具体做法为，令&lt;/p&gt;
&lt;p&gt;$$
H(i)=\begin{cases}
0&amp;amp;, i=0 \\
H(i-1)\cdot p + s_i&amp;amp;, i &amp;gt; 0
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;那么区间 $[l, r]$ 的子串的哈希值为&lt;/p&gt;
&lt;p&gt;$$
hash(s[l\ldots r]) = H(r) - H(l - 1)\cdot p^{r - l + 1}
$$&lt;/p&gt;
&lt;p&gt;你可以仔细计算一下以体会它的正确性。&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;我真的可以放心地不做冲突处理地使用字符串哈希吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从理论角度，使用自然溢出的字符串单哈希是可以通过精心构造输入数据卡掉的。具体方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用的种子是偶数时：如果两个字符串的第 $i$ 位不同，它们在这一位的哈希值将相差 $p^i\cdot \Delta s$。那么构造两个字符串，它们的低位都相同，第一个不同的位是第 $x$ 位，那么可想而知它们哈希值的差会是 $p^x$ 的倍数。由于 $p$ 是偶数，所以当 $x\geq 64$ 时，这个差值必然是自然溢出模数的倍数，从而发生哈希冲突。&lt;/li&gt;
&lt;li&gt;采用的种子是奇数时：考虑按照如下方式构造 01 串，其中的 “not” 符号表示将字符串取反：
$$
\begin{align*}
S(0) &amp;amp;= 1\\
S(n) &amp;amp;= S(n - 1) + \text{not}(S(n-1))
\end{align*}
$$
令 $f(n) = hash(S(n)) - hash(\text{not}(S(n)))$，有
$$
\begin{align*}
f(0) &amp;amp;= 1\\
f(n) &amp;amp;= f(n-1)\cdot \left(p^{2^{n-1}} - 1\right)
\end{align*}
$$
从而
$$
f(n) = \prod_{i=0}^{n-1}\left(p^{2^i}-1\right)
$$
考察 $g(n)=p^{2^n}-1$ 的2因子的个数，运用平方差公式，有
$$
\begin{align*}
g(n) &amp;amp;= \left(p^{2^{n-1}}+1\right)\left(p^{2^{n-1}}-1\right) \\
&amp;amp;= \left(p^{2^{n-1}}+1\right)\cdot g(n-1)
\end{align*}
$$
因为 $p^{2^{n-1}}+1$ 是偶数，$g(0)=p-1$ 也是偶数，所以 $g(n)$ 至少含有因子 $2^{n+1}$，从而 $f(n)$ 至少含有 $\frac{1}{2}n(n+1)$ 个2因子。只要将 $n$ 取得稍大一些，$S(n)$ 和 $\text{not}(S(n))$ 的哈希差值就会是自然溢出模数的倍数，然而他们没有一位是相同的。更加精妙的是，由于 $S(n)$ 和 $\text{not}(S(n))$ 的高度对称性，从右往左哈希的结果只是取一个负号，仍然是自然溢出等价的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综合以上两点，我们可以先用奇数种子的方法构造 $S(n)$ 和 $\text{not}(S(n))$，然后再在它们首尾各接上一大串相同的字符，这样不论自然溢出哈希是从左向右还是从右向左，不论种子的值是什么，这两个串都会冲突。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以上只是从非常理论的角度分析了目前人类智慧已经可以找到不处理冲突的自然溢出哈希的反例，但事实上除非存在一个“出题人”成心想卡，自然溢出哈希的正确性和效率还是非常可观的。如果你实在不放心，可以采取以下的双哈希策略：&lt;/p&gt;
&lt;p&gt;$$
\begin{align*}
h_1(s) &amp;amp;= \left(\sum_{i=1}^np_1^{n-i}s_i\right)\ \text{mod}\ M_1 \\
h_2(s) &amp;amp;= \left(\sum_{i=1}^np_2^{n-i}s_i\right)\ \text{mod}\ M_2 \\
\end{align*}
$$&lt;/p&gt;
&lt;p&gt;然后令 $s$ 的哈希值为 $(h_1(s), h_2(s))$ 这样一个 pair，其中 $p_1,p_2$ 通常取质数，$M_1, M_2$ 通常取 $10^9$ 附近的大质数。值域 $[1, M_1]\times [1, M_2]$ 的宽广性保证了哈希冲突的概率极低，且目前不存在已知的可以针对任意模数的双哈希反例构造方法。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;del&gt;搬运&lt;/del&gt;参考了许昊然的
&lt;a href=&#34;https://sillycross.github.io/cnblog/2012/05/18/2012-05-18/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客&lt;/a&gt;。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>二分答案</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/answer-binary-search/</link>
      <pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/answer-binary-search/</guid>
      <description>&lt;p&gt;二分答案是一种&lt;strong&gt;充分利用答案的离散特性和问题的单调特性，用 $O(\log n)$ 倍的时间复杂度的代价将最优化问题转化为判定问题的思想&lt;/strong&gt;。这句话有些抽象，我们通过一道例题来展示二分答案思想的运用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定一个长度为 $n(1\leq n\leq 10^5)$ 的正整数数列和一个整数 $k$，要求将数列划分成连续的 $k$ 份 (形象地来说，将其切成 $k$ 段)，对每一段中的数求和，要求最大的和最小，并输出这个和。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这题困难的地方在于你很难确定第一刀切在哪里——如果切的太靠后，这一段的和本身可能就太大了；如果切的太靠前，后面的段可能包含的数过多，会导致后面的段的和太大。该题最优化的要求使得我们每一步既要瞻前也要顾后，从而难以下手。&lt;/p&gt;
&lt;p&gt;我们利用这个问题来解释二分答案思想的合适使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;答案的离散性：最终答案一定是一个 $[1, \sum a_i]$ 之间的整数，可选的答案是有限个。&lt;/li&gt;
&lt;li&gt;问题的单调性：如果 $s$ 满足题目的要求，即存在一个划分方案满足最大和小于等于 $s$，那么所有大于 $s$ 的值都满足条件。在单调性的基础上，你可以看出 $[1, \sum a_i]$ 中的整数存在一个“分界线”，小于分界线的数都给不出划分方案 (无法成为答案)，大于等于该分界线的都可以给出划分方案。我们要找的就是这个“分界线”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二分答案 (以原问题为最小化问题为例，最大化问题相反) 的框架如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;l, r, ans = 答案的下限, 答案的上限, 0
while l &amp;lt;= r:
    mid = (l + r) &amp;gt;&amp;gt; 1
    if check(mid): # mid 是合法的 
        ans = mid  # 作为备选答案
        r = mid - 1 # 尝试往左寻找更小的答案
    else:
        l = mid + 1 # “分界线”在右侧
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在本问题中，通过二分答案，我们可以将每轮的问题转化为：是否存在一个划分方案，使得每段的和都不超过 $mid$？这个问题存在简单的贪心解法，我们尽可能让当前段容纳更多的数，直到再加入一个数就超过限制了的时候，我们划一刀开启新的一段。最终是否合法取决于能否用不超过 $k$ 段把所有的数容纳进来。&lt;/p&gt;
&lt;p&gt;二分答案的外层框架提供了 $O(\log \sum a_i)$ 的代价，里面每一轮检查都是 $O(n)$ 的，因此总时间复杂度为 $O(n\log \sum a_i)$。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;套路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然硬背套路是高考生才做的事，但我们在这里仍然给出可使用二分答案思想解决的问题通常具有的典型特征，供大家作为参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;答案的离散性、问题的单调性。&lt;/li&gt;
&lt;li&gt;问题最后求的是“最小值的最大值”或“最大值的最小值”。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cdq分治</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/cdq/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/cdq/</guid>
      <description>&lt;p&gt;cdq分治是一种常用的分治思想，最早由 
&lt;a href=&#34;https://www.cs.princeton.edu/~danqic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;陈丹琦&lt;/a&gt; 整理和总结 (
&lt;a href=&#34;https://www.cs.princeton.edu/~danqic/papers/divide-and-conquer.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原文地址&lt;/a&gt;)。这种思想从 high-level 层面来说十分简单和抽象：当我们希望解决某个问题 &lt;code&gt;solve(l, r)&lt;/code&gt; 时，我们可以考虑如下的分治步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决 &lt;code&gt;solve(l, mid)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;考虑 &lt;code&gt;[l, mid]&lt;/code&gt; 对 &lt;code&gt;[mid+1, r]&lt;/code&gt; 的贡献。&lt;/li&gt;
&lt;li&gt;解决 &lt;code&gt;solve(mid+1, r)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一步和第三步非常简明，但第二步的“贡献”非常抽象，需要具体问题具体分析。这里我们以二维偏序和三维偏序为例示范一些“贡献”的计算方法。&lt;/p&gt;
&lt;p&gt;二维偏序问题指对于一个二元组序列 $(a_1, b_1), (a_2, b_2),\cdots, (a_n, b_n)$，求满足 $a_i&amp;lt;a_j$ 且 $b_i&amp;lt;b_j$ 的数对 $(i, j)$ 的个数。显然我们如果将二元组按照 $a_i$ 从小到大排序，那么该问题就转化为了 $b_i$ 序列的逆序数问题。我们尝试套用cdq分治的“模板”来解决它。令 $solve(l, r)$ 表示区间 $[l, r]$ 内的逆序对个数，最终答案显然为 $solve(1, n)$。$solve(l, r)$ 分为三个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$solve(l, mid)$：递归解决.&lt;/li&gt;
&lt;li&gt;计算下标在 $[l, mid]$ 中的数对 $[mid+1, r]$ 中的数的贡献。换言之，我们需要计算满足 $i\in [l, mid], j\in [mid+1, r]， b_i&amp;gt;b_j$ 的 $(i, j)$-pair 个数。&lt;/li&gt;
&lt;li&gt;$solve(mid+1, r)$：递归解决。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重点关注第二条。虽然看上去还是在数“逆序对”，但它比原问题简单了很多——因为 $[l, r]$ 的数被鲜明地分成了 $[l, mid]$ 和 $[mid+1, r]$ 两类。换言之，每个数 $b_i$ 可以被看作 $(0, b_i)$ 或者 $(1, b_i)$，取决于它在左半边还是右半边，我们只关心 0 的那一类 $b_i$ 比 1 的那一类 $b_i$ 大的数目。我们可以通过按照 $b_i$ 做一遍归并排序，然后统计每个 0 前面有多少个 1 的方法来解决。使用主定理分析容易得知该算法的时间复杂度为 $O(n\log n)$。&lt;/p&gt;
&lt;p&gt;在进入三维偏序之前，我们先尝试总结 cdq 分治降低问题难度的本质：它通过分治递归处理子问题，然后在当前层面上只考虑左对右的贡献，从而将&lt;strong&gt;某一维度的排序问题转换成了 0/1 的二元问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;再来看三维偏序问题。三维偏序问题和二维偏序定义类似，只不过每个元素都换成了三元组 $(a_i, b_i, c_i)$。我们如法泡制，对第一维排序后套用 cdq 分治，相当于将所有的三元组转换成了 $(0/1, b_i, c_i)$。由于还剩下两维，直接下手有点困难 (除非你掌握了某些高级的数据结构)，但我们可以在 cdq 分治上再套一层 cdq 分治：具体来说，我们可以对 $b_i$ 这一维度做归并排序，然后对其 cdq 分治，这样在第三维上每个三元组实际上被转化成了 $(0/1, 0/1, c_i)$，我们只需要考虑所有形如 $(0, 0, c_1)$ 对 $(1, 1, c_2)$ 的贡献即可。总时间复杂度 $O(n\log^2n)$。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;致歉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本讲义写的相当糟糕——cdq分治难度较大，思想比较微妙，笔者功力有限，用语言难以描述清楚。我们提供两份额外的参考资料，一是 &lt;a href=&#34;https://oi-wiki.org/misc/cdq-divide/&#34;&gt;OIWiki&lt;/a&gt; 上对于 cdq 分治的讲解，二是一份 cdq 套 cdq 的三维偏序的参考实现，希望尽可能帮助感兴趣的同学理解。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;details&gt;&lt;summary&gt;&lt;b&gt;Code&lt;/b&gt; :: &lt;i&gt;Click to expand&lt;/i&gt;&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;struct node
{
    int x,y,z;
    int nx,ny,nz;
    bool operator == (const node cp)
    {
        return (x==cp.x) &amp;amp;&amp;amp; (y==cp.y) &amp;amp;&amp;amp; (z==cp.z);
    }
}p[100048],a[100048],b[100048],c[100048];

int n;
int ans = 0;

bool cmp(node x,node y)
{
    if (x.x!=y.x) return x.x&amp;lt;y.x;
    if (x.y!=y.y) return x.y&amp;lt;y.y;
    return x.z&amp;lt;y.z;
}

void cdq2(int left,int right)
{
    if (left==right) return;
    int i,k1,k2,pt,mid=(left+right)&amp;gt;&amp;gt;1;
    cdq2(left,mid);cdq2(mid+1,right);
    int cnt=0;
    for (k1=left,k2=mid+1,pt=left;pt&amp;lt;=right;pt++)
    {
        if (k2&amp;gt;right || (k1&amp;lt;=mid &amp;amp;&amp;amp; k2&amp;lt;=right &amp;amp;&amp;amp; b[k1].z&amp;lt;=b[k2].z))
        {
            if (!b[k1].nx) cnt++;
            c[pt]=b[k1++];
        }
        else
        {
            if (b[k2].nx) ans += cnt;
            c[pt]=b[k2++];
        }
    }
    for (i=left;i&amp;lt;=right;i++) b[i] = c[i];
}

void cdq1(int left,int right)
{
    if (left==right) return;
    int i,k1,k2,pt,mid=(left+right)&amp;gt;&amp;gt;1;
    cdq1(left,mid); cdq1(mid+1,right);
    for (k1=left,k2=mid+1,pt=left;pt&amp;lt;=right;pt++)
    {
        if (k2&amp;gt;right || (k1&amp;lt;=mid &amp;amp;&amp;amp; k2&amp;lt;=right &amp;amp;&amp;amp; a[k1].y&amp;lt;=a[k2].y))
        {
            b[pt]=a[k1++];
            b[pt].nx=0;
        }
        else
        {
            b[pt]=a[k2++];
            b[pt].nx=1;
        }
    }
    for (i=left;i&amp;lt;=right;i++) a[i] = b[i];
    cdq2(left,right);
}

int main ()
{
    int i;
    n=getint();i=getint();
    for (i=1;i&amp;lt;=n;i++) {p[i].x=getint();p[i].y=getint();p[i].z=getint();}
    sort(p+1,p+n+1,cmp);
    for (i=1;i&amp;lt;=n;i++) a[i] = p[i];
    cdq1(1, n);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>最近公共祖先-倍增</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/lca/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/lca/</guid>
      <description>&lt;p&gt;在计算机世界中，所有与2的次幂相关的事情总是充满魔力的——即便是很大的数，对2取对数后也会落入我们容易处理的范围。之前介绍过的快速幂算法其实就是倍增思想的一种运用。这里我们以计算树上最近公共祖先 (lowest common ancestor, LCA) 为例再次展示倍增思想的强大。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你对“树”一无所知，你可以参考 &lt;a href=&#34;https://en.wikipedia.org/wiki/Tree_(data_structure)&#34;&gt;维基百科&lt;/a&gt; 中的解释。这里强调一些简明的入门概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树是一个有 $n$ 个顶点和 $n-1$ 条边构成的连通图 (连通指整个图只有“一块”，即任意两点之间都存在路径可达)。容易发现，树中是不会有环的。&lt;/li&gt;
&lt;li&gt;如果选择一个节点作为树根 (root)，那么整棵树会形成一个层次结构。树上的每个节点到根有且仅有一条路径，这个路径的长度称为节点的深度。&lt;/li&gt;
&lt;li&gt;在有根树中，每个节点“上面”相邻的只有一个节点，称为该节点的父亲。每个节点“下面”相邻的有一堆节点 (也可能没有)，称为该节点的孩子。一个节点A的父亲，父亲的父亲，…… 一直向上到根这条链上所有的节点都是A的祖先。&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对于树中的两个节点 $u, v$，$LCA(u, v)$ 指的是 $u$ 和 $v$ 的所有公共祖先中最深的那个 (也可以说是离 $u, v$ 最近的那个)。下面是一个例子:&lt;/p&gt;
&lt;img src=&#34;https://kristoff-starling.github.io/img/LCA.png&#34; style=&#34;zoom: 30%;&#34; /&gt;
&lt;p&gt;暴力地求解LCA不算困难，总体思想是：我们先让深度大的节点往上爬，爬到和另一个节点相同深度，然后让 $u$ 和 $v$ 一直向上爬，直到它们相遇。下面的代码非常易懂&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int LCA_bruteforce(int u, int v)
{
    if (depth[u] &amp;lt; depth[v]) swap(u, v);
    while (depth[u] &amp;gt; depth[v])
        u = father[u];
    while (u != v)
    {
        u = father[u];
        v = father[v];
    }
    return u;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该算法的问题在于：如果树的深度很大 (例如达到了和 $n$ 同阶)，那么每次求解两个节点的 LCA 都需要 $O(n)$ 的时间。如果我们需要多次求解多个点对的 LCA (例如 $q$ 次)，就需要 $O(qn)$ 的时间。在 $q$ 较大的情况下这不可接受。&lt;/p&gt;
&lt;p&gt;接下来我们向大家展示如何利用倍增思想优化 LCA 的求解：&lt;/p&gt;
&lt;p&gt;令 $anc(u,i)$ 表示节点 $u$ 向上爬 $2^i$ 步之后到达的节点编号，如果 $depth(u)&amp;lt;2^i$ 则 $anc(u,i)=0$。我们发现 $anc(u,i)$ 是容易计算的：&lt;/p&gt;
&lt;p&gt;$$
anc(u, i)=
\begin{cases}
father(u)&amp;amp;, i=0\\
anc(anc(u, i-1), i-1)&amp;amp;, i \geq 1
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;简单来说，向上爬 $2^n$ 步的结果等于先向上爬 $2^{n-1}$ 步，再向上爬 $2^{n-1}$ 步的结果。如果我们按照 $i$ 从小到大的顺序计算所有节点的 $anc(u,i)$，那么可以递推地完成计算过程。在实际实现时我们通常树搜索的过程中完成 anc 数组的计算，详见最后的参考代码。&lt;/p&gt;
&lt;p&gt;有了 anc 数组后，“向上跳”的流程就可以被大幅加速。我们先假设 $u, v$ 深度相同，这时我们不需要每次向上爬一格，而可以用 anc “赌一把大的”：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for (int i = 20; i &amp;gt;= 0; i--)
    if (anc[u][i] != anc[v][i])
    {
        u = anc[u][i];
        v = anc[v][i];
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里巧妙地利用了整数二进制拆分的唯一性：假设 $depth(u)-depth(LCA(u, v))=d$，且
$$
d-1 = 2^{a_1} + 2^{a_2} + \cdots + 2^{a_k}, a_1&amp;gt;a_2&amp;gt;\cdots&amp;gt;a_k
$$
那么上述循环正好会在 $i=a_1, a_2,\cdots, a_k$ 的地方“向上跳”。之所以是 $d-1$ 而不是 $d$ 是因为我们要求 &lt;code&gt;anc[u][i] != anc[v][i]&lt;/code&gt;，只有这样我们才能确保没有“跳过头”，因此上述循环结束后 $u, v$ 都会正好在 LCA 的下面 (孩子)。我们强烈建议你手画一个例子体会这个过程。&lt;/p&gt;
&lt;p&gt;还剩下一个问题：如果 $u, v$ 深度不同该怎么办。和暴力做法的思路一样，我们可以让深度大的节点向上爬，爬到和另一个节点同深度。不过在 anc 数组的加持下，我们不再需要一个一个地爬了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// 假设 depth[u] &amp;gt;= depth[v]
for (int i = 20; i &amp;gt;= 0; i--)
    if (depth[anc[u][i]] &amp;gt;= depth[v])
        u = anc[u][i];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你仍然可以用整数拆分的方式证明：$u$ 只会在 $depth(u)-depth(v)$ 的二进制表示中为 1 的那些位置向上跳，且循环结束后 $u$ 会和 $v$ 同深度。&lt;/p&gt;
&lt;p&gt;我们来分析这个倍增做法的复杂度：它尝试用 $2^k, 2^{k-1},\cdots, 2^1, 2^0$ 去覆盖 $u, v$ 到 LCA 的深度差距，因此只需要 $O(\log n)$ 的时间即可完成一次查询。虽然预处理 anc 表需要 $O(n\log n)$ 的时间，但在查询次数较多的情况下，$O(n\log n + q\log n)$ 就会比 $O(n + qn)$ 更有优势。&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;通用思想&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从更抽象的层面来说，倍增思想成功的关键很多时候是一种“单一的扩展可能”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在快速幂的例子中，$*2$ 这件事非常固定，这使得 $2^n$ 可以通过重复 $*2$ 得到；&lt;/li&gt;
&lt;li&gt;在 LCA 的例子中，每个节点的父亲只有一个，这使得往上 $n$ 层的祖先可以通过重复 &lt;code&gt;u=father[u]&lt;/code&gt; 得到；&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这段话看起来有点玄学，但如果你接触了更多可以通过倍增思想解决的问题结构，回过头看可能会对此有更深的理解。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;更快地求解LCA?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然 $O(\log n)$ 的效率已经足够令人满意，但事实上在充分预处理的情况下，我们可以 $O(1)$ 地完成一对点的 LCA 查询。如果你对此感兴趣，可以尝试搜索 ST 表、dfs 序等关键词。我们会在合适的时机向大家展示这种技术。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;以下是一份参考代码：&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;&lt;b&gt;LCA&lt;/b&gt;&lt;i&gt;::click to expand&lt;/i&gt;&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;const int MAXN = 2e5 + 10;
vector&amp;lt;int&amp;gt; v[MAXN];   // vector 存储了每个节点相邻点的编号
int depth[MAXN];       // depth 存储了每个节点的深度
int anc[MAXN][21];     // 2 ^ 21 &amp;gt; MAXN

void dfs(int x, int fa)
{
    // 搜索到 x 时 x 的所有祖先都已经被访问过，anc 数组已被计算
    // 因此现在就可以计算 x 的 anc 数组
    anc[x][0] = fa;
    for (int i = 1; i &amp;lt;= 20; i++)
        anc[x][i] = anc[anc[x][i - 1]][i - 1];
    // 搜索
    for (int y : v[x])
        if (y != fa)   // 相邻的节点不是父亲，那就是孩子，向下搜索
        {
            depth[y] = depth[x] + 1;
            dfs(y, x); // y 是 x 的孩子，x 是 y 的父亲
        }
}

int query_lca(int x, int y)
{
    if (depth[x] &amp;lt; depth[y]) swap(x, y);
    for (int i = 20; i &amp;gt;= 0; i--)
        if (depth[anc[x][i]] &amp;gt;= depth[y])
            x = anc[x][i];
    // 此时有 depth[x] = depth[y]
    if (x == y) return x;
    for (int i = 20; i &amp;gt;= 0; i--)
        if (anc[x][i] != anc[y][i])
        {
            x = anc[x][i];
            y = anc[y][i];
        }
    // 注意不等号条件，此时 x, y 一定都是 LCA 的孩子, LCA = anc[x][0] = anc[y][0]
    return anc[x][0];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;</description>
    </item>
    
    <item>
      <title>ST表</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/st/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/st/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;已知一个数列 $a_1, \cdots, a_n$。给定 $l, r$，问区间 $a_l, \cdots a_r$ 的某种值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ST表是一种处理上述格式的区间查询问题的利器。这类问题通常被称为 RMQ (range minimum query)，但实际上 ST 表可以应对的问题远不止最小值这一种。&lt;/p&gt;
&lt;p&gt;大家已经或多或少地接触过一些区间查询问题，例如求区间的和。以 $+$, $xor$ (异或操作) 这类算符为代表的操作的特点在于可以简明地写出逆运算。例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a + x - x = a&lt;/li&gt;
&lt;li&gt;a ^ x ^ x = a&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;满足这种特性的算符使用前缀技术可以高效地求解区间查询：
$$
\begin{align}
&amp;amp;pre(n)\triangleq op_{k=1}^n a_k \\
&amp;amp;op(l, r) = pre(r)\space op^{-1}\space pre(l-1)
\end{align}
$$&lt;/p&gt;
&lt;p&gt;但有些算符，例如 $\max, \min, or$ (同或操作)，它们不存在简明的逆运算符，从而无法用前缀技术解决区间问题 (例如，知道 $\max_{i\in [1, r]}a_i$ 和 $\max_{i\in [1, l-1]}a_i$ 对求解 $[l, r]$ 内的最大值没什么帮助)。但这些算符又具有加法、异或所不具备的特性——重复操作不会对结果带来影响：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\max(a, b) = \max(\max(\max(a, b), b), b)$&lt;/li&gt;
&lt;li&gt;$a | b = a | b | b | b$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ST表正适合用于解决这类算符的区间查询问题。ST表的本质是倍增思想 (由此可见倍增思想运用之广)。下面的讲解以最小值为例，但可以容易地扩展到其他算符上：&lt;/p&gt;
&lt;p&gt;令 $ST(i, j)$ 表示区间 $[i, i + 2^j)$ 的最小值。容易发现对于一个数列来说，按照 $j$ 的顺序从小到大计算 ST 可以递推地高效求解：&lt;/p&gt;
&lt;p&gt;$$
ST(i, j)=
\begin{cases}
a_i&amp;amp;, j = 0\\
\min(ST(i, j-1), ST(i + 2^{j-1}, j-1))&amp;amp;, j \geq 1
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;简单来说，长度为 $2^j$ 的区间的最小值可以用已经求好的两个长度为 $2^{j-1}$ 的区间的最小值求 $\min$ 得到。如果 $i + 2^{j-1}$ 超出了 $n$，那么可以不考虑后一半的贡献。&lt;/p&gt;
&lt;p&gt;预处理好所有长度为2的次幂的区间的最小值，对于任意区间 $[l, r]$ 的最小值，我们可以用如下方式 $O(1)$ 地求解：令 $k$ 为最大的满足 $2^k\leq r-l+1$ 的整数，那么
$$
\min_{i=l}^r a_i = \min(ST(l, k), ST(r - 2^k + 1, k))
$$
它的思想是：$[l, l + 2^k)$ 和 $[r - 2^k + 1, r + 1)$ 这两个部分重叠的区间完整地覆盖了 $l[l, r]$，因此拿着它们的最小值求 min 即可得到全区间的最小值。在这里你可以看出 $\min$ 算符的“重复操作不影响结果”的特性对该做法的正确性保证至关重要。&lt;/p&gt;
&lt;p&gt;最后一个简单的小问题是：如何求 $k$。从数学的角度，你可以使用数学库中的 $\log$ 函数，但更常见的做法是线性预处理所有可能长度对应的 $k$ 值：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;K[1] = 0;
for (int i = 2; i &amp;lt;= n; i++) K[i] = K[i &amp;gt;&amp;gt; 1] + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以用数学归纳法来证明该做法的正确性。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ST 表可以在 $O(n\log n)$ 的预处理复杂度下，$O(1)$ 地求解任意区间的值。&lt;/li&gt;
&lt;li&gt;算符需要保证具有“重复操作不影响结果”的特性。&lt;/li&gt;
&lt;li&gt;ST 表无法处理带修改的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;真的要具有“可重复贡献”性吗?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你仔细学习了LCA章节的讲义，可能会想：如果把区间 $[l, r]$ 通过二进制拆分的方式拆成若干互不相交的，长度为2的次幂的区间的并，不就可以在 $O(\log n)$ 的时间内完成任意算符的区间查询了么？&lt;/p&gt;
&lt;p&gt;非常好的想法！而且确实是正确的。只不过一般没有人会这么做——ST表不支持修改的特性是硬伤，它的“卖点”主要是 $O(1)$ 的效率。因此如果要花费 $O(\log n)$ 的代价才能完成区间求值，它的价值就十分有限了。我们会在合适的时机向大家展示支持修改的 $O(\log n)$ 地完成各种区间操作的技术。&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>分块——优雅的暴力</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/chunking/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/chunking/</guid>
      <description>&lt;p&gt;分块的思想被应用在生活的方方面面：举一个最简单的例子，大家上小学的时候通常班级里的座位被分成若干个“组”。每组有一个小组长 (传说中的“一道杠”)，班里有班干部 (传说中的“二道杠&amp;quot;)。班长在统计人数的时候，最便捷的方法就是让各个小组长统计自己组内的人数，汇总到班长手中再做一次简单加法。&lt;/p&gt;
&lt;p&gt;在算法设计中，分块的思想也常常被使用。空说无益，我们通过一个比 OJ 练习题更复杂的问题来解释分块思想的运用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定数列 $a_1, \cdots, a_n$，高效实现 $q$ 次以下两种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 l r x&lt;/code&gt;：给区间 $[l, r]$ 中的数统一加上 $x$。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 l r&lt;/code&gt;：查询 $\sum_{k=l}^r a_k$ 的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;暴力修改和统计有着相同的问题：如果给定的区间很长，那么操作执行就相当缓慢。总时间复杂度可以达到 $O(qn)$。&lt;/p&gt;
&lt;p&gt;我们来考虑如下的一种分块策略：将数列分成若干个长度为 $m$ 的小段 (第一段是 $[0,m)$，第二段是 $[m, 2m)$，依次类推，我们假设 $n$ 可以被 $m$ 整除)，命名为 $B_1, B_2, \cdots, B_b$。我们为每个块分配一个累加标记 $t_i$，表示这个块上的数被&lt;strong&gt;整体&lt;/strong&gt;加了多少，再维护一个和标记 $s_i$，表示在不考虑累加标记的情况下块内的数的和。那么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于给 $[l, r]$ 上的数加 $x$ 这件事，我们可以把 $[l,r]$ 这个大区间拆分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$[l, l_1]$，开头的一段，是某个块的后缀&lt;/li&gt;
&lt;li&gt;$[l_1+1, r_1]$，这一段正好对应若干个完整的块。&lt;/li&gt;
&lt;li&gt;$[r_1+1, r]$，结尾的零碎一段，是某个块的前缀。&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
对于 $[l, l_1]$ 和 $[r_1, r]$，我们一个一个地给每个数 +x (别忘了同步更新该块对应的 $s_i$)。对于中间的若干个完整的块，我们直接把 +x 标记打在对应的 $t_i$ 上 (即 &#34;ti += x&#34;)。
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;对于求 $\sum_{k=1}^ra_k$，我们仍然可以把区间拆成上述的三个部分。对于开头和结尾的零碎区间，我们一个一个地累加，对于中间的若干个完整的块，我们发现一个块的实际的和可以通过如下方式算出：
$$
sum_i = s_i + t_i * m
$$
将中间完整块的 $sum_i$ 累加起来即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了更清楚地说明上述思想，我们给出修改和查询操作的简单伪代码：&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;Pseudocode :: Click to expand&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void modify(int l, int r, int x)
{
    decompose [l, r] into [l, l1], [l1, r1] and [r1, r]
    suppose [l1, r1] = Bp, Bp+1, ..., Bq
    // 开头零碎段
    for (int i = l; i &amp;lt;= l1; i++)
    {
        a[i] += x;
        s[p-1] += x;
    }
    // 中间完整段
    for (int i = p; i &amp;lt;= q; i++)
        t[i] += x;
    // 结尾零碎段
    for (int i = r1 + 1; i &amp;lt;= r; i++)
    {
        a[i] += x;
        s[q+1] += x;
    }
}

int query(int l, int r)
{
    decompose [l, r] into [l, l1], [l1, r1] and [r1, r]
    suppose [l1, r1] = Bp, Bi+1, ..., Bq

    int sum = 0;
    // 开头零碎段
    for (int i = l; i &amp;lt;= l1; i++)
        sum += a[i];
    // 中间完整段 
    for (int i = p; i &amp;lt;= q; i++)
        sum += s[i] + t[i] * m;
    // 结尾零碎段 
    for (int i = r1 + 1; i &amp;lt;= r; i++)
        sum += a[i];
    
    return sum
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;p&gt;接下来我们考虑这个块的长度应当如何设计。我们容易发现块如果太大，那么一个修改/查询区间首尾的零碎部分就可能太长；如果块太小，那么一个修改/查询区间就可能包含太多的块。具体的，在块大小为 $m$ 时，整个数列被划分成 $n/m$ 个块，那么在一次操作中，首尾的零碎部分的求和复杂度可以达到 $2m = O(m)$，累加区间中间包含的整块的信息的时间复杂度最多可以达到 $O(n/m)$ ，于是有
$$
\arg\min_m \left\{O(m), O(n/m)\right\} \Longrightarrow m=\sqrt n
$$
所以，将块的大小定义在 $\sqrt n$ 附近是最合理的选择，这也是分块思想通常被称为“根号暴力”的原因。可以算出，在我们的分块算法下，解决原问题的复杂度被降低到了 $O(q\sqrt n)$。&lt;/p&gt;
&lt;p&gt;数列上分块是分块思想最常见的应用，但分块的应用不仅停留在这种线性结构上。从抽象层面说，如果你发现你可以将某一些东西绑成一个整体，然后将某些操作统一在整体层面，那么便可以考虑分块。分块被称为是一种优雅的暴力，因为它没有复杂的数据结构设计，看上去就是一些加加减减，便举重若轻地解决了问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>快速幂</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/repeatedsquare/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/repeatedsquare/</guid>
      <description>&lt;p&gt;给定 $a,n$，考虑如何计算 $a^n$ 。如果使用如下循环计算结果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int res = 1;
for (int i = 1; i &amp;lt;= n; i++)
    res = res * a;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;时间复杂度为 $O(n)$，当 $n$ 很大时效率太低。快速幂是用于计算该类问题的常见算法，其本质思想是递归/倍增:&lt;/p&gt;
&lt;p&gt;$$
a^n=\begin{cases}1&amp;amp;,n=0\\(a^{n/2})^2&amp;amp;,n是偶数, n\geq 1\\(a^{\lfloor n/2\rfloor})^2\cdot a&amp;amp;,n是奇数, n\geq 1\end{cases}
$$&lt;/p&gt;
&lt;p&gt;因此我们可以通过不断折半幂次的方式来求解 $a^n$。写出该算法的复杂度递归表达式：&lt;/p&gt;
&lt;p&gt;$$
T(n)=T(n/2)+O(1)
$$&lt;/p&gt;
&lt;p&gt;容易得出 $T(n)=O(\log n)$。&lt;/p&gt;
&lt;p&gt;直接根据递归式，我们容易写出如下递归代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int quick_pow(int a, int n)
{
    if (n == 0) return 1;
    res = quick_pow(a, n / 2);
    if (n % 2 == 0)
        return res * res;
    else
        return res * res * a;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但我们通常使用一种更加优美的写法来使用循环替代递归：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int quick_pow(int a, int n)
{
    int res = 1;
    while (n)
    {
        if (n &amp;amp; 1) res = res * a;
        a = a * a; n &amp;gt;&amp;gt;= 1;
    }
    return res;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该实现的核心思想是利用 $n$ 的二进制表示中 1 的位置来判断 $a^n$ 是由哪些 $a^{2^k}$ 组合而成的。即如果 $n$ 的二进制表示中在 $k_1,k_2,\cdots, k_m$ 这些位置上是 1，那么&lt;/p&gt;
&lt;p&gt;$$
a^n=a^{\sum_{i=1}^m2^{k_i}}=\prod_{i=1}^ma^{2^{k_i}}
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>矩阵快速幂</title>
      <link>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/matmul/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://kristoff-starling.github.io/courses/problemsolving22/algorithms/matmul/</guid>
      <description>&lt;p&gt;关于基础理论，参见
&lt;a href=&#34;https://kristoff-starling.github.io/posts/recurrences/&#34;&gt;这篇博文&lt;/a&gt;。如果你之前从未了解过线性递推相关的知识/目前以完成OJ为主要目标，只需看懂该文章的 Getting Started 章节。本文主要对矩阵乘法和矩阵快速幂的实现给出一点建议。&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t Panic!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只有 &lt;code&gt;Problem Solving&lt;/code&gt; 目录下的内容才是大家需要且应当掌握的内容。链接中博文的大部分内容与问题求解课程并不相关，且我不认为掌握这些数学强相关的知识对计算机思维有太多提升。因此如果你不愿意读 Getting Started 之后的内容/读不懂后面的内容，这非常正常也无关紧要！&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;你可以参考
&lt;a href=&#34;https://kristoff-starling.github.io/courses/problemsolving22/coding/matmul&#34;&gt;这篇博文&lt;/a&gt; 来学习矩阵快速幂实现的代码细节。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
